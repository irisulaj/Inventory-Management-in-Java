/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package retailpackages;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author iri_s
 */
public class RetailMainFrame extends javax.swing.JFrame {

    /**
     * Creates new form RetailMainFrame
     */
    public RetailMainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        HomepagePanel = new javax.swing.JPanel();
        lblHome = new javax.swing.JLabel();
        AddItemsPanel = new javax.swing.JPanel();
        lblAddItems = new javax.swing.JLabel();
        lblId = new javax.swing.JLabel();
        lblname = new javax.swing.JLabel();
        lbldescription = new javax.swing.JLabel();
        lblrdate = new javax.swing.JLabel();
        lblbrand = new javax.swing.JLabel();
        lblbprice = new javax.swing.JLabel();
        lblsprice = new javax.swing.JLabel();
        lblquantity = new javax.swing.JLabel();
        txtItemsId = new javax.swing.JTextField();
        txtItemsName = new javax.swing.JTextField();
        txtItemsDescription = new javax.swing.JTextField();
        txtItemsRdate = new javax.swing.JTextField();
        txtItemsBrand = new javax.swing.JTextField();
        txtItemsBprice = new javax.swing.JTextField();
        txtItemsSprice = new javax.swing.JTextField();
        txtItemsQuantity = new javax.swing.JTextField();
        jScrollPaneItems = new javax.swing.JScrollPane();
        ItemsTable = new javax.swing.JTable();
        btnSaveItems = new javax.swing.JButton();
        btnClearItems = new javax.swing.JButton();
        btnUpdateItems = new javax.swing.JButton();
        btnDeleteItems = new javax.swing.JButton();
        btnAddInventory = new javax.swing.JButton();
        errorMsgItems = new javax.swing.JLabel();
        InventoryPanel = new javax.swing.JPanel();
        lblInventory = new javax.swing.JLabel();
        lblInvId = new javax.swing.JLabel();
        lblInvName = new javax.swing.JLabel();
        lblInvDescription = new javax.swing.JLabel();
        lblInvUpdateAt = new javax.swing.JLabel();
        lblInvBrand = new javax.swing.JLabel();
        lblInvBprice = new javax.swing.JLabel();
        lblInvSprice = new javax.swing.JLabel();
        lblInvQuantity = new javax.swing.JLabel();
        errorMsgInventory = new javax.swing.JLabel();
        txtInventoryItemId = new javax.swing.JTextField();
        txtInventoryName = new javax.swing.JTextField();
        txtInventoryDescription = new javax.swing.JTextField();
        txtInventoryUpdateAt = new javax.swing.JTextField();
        txtInventoryBrand = new javax.swing.JTextField();
        txtInventoryBprice = new javax.swing.JTextField();
        txtInventorySprice = new javax.swing.JTextField();
        txtInventoryQuantity = new javax.swing.JTextField();
        jScrollPaneInventory = new javax.swing.JScrollPane();
        InventoryTable = new javax.swing.JTable();
        btnSaveInventory = new javax.swing.JButton();
        btnClearInventory = new javax.swing.JButton();
        btnUpdateIventory = new javax.swing.JButton();
        btnDeleteInventory = new javax.swing.JButton();
        SalesPanel = new javax.swing.JPanel();
        lblSales = new javax.swing.JLabel();
        ItemInformationPanel = new javax.swing.JPanel();
        lblItemInfoId = new javax.swing.JLabel();
        txtItemInfoId = new javax.swing.JTextField();
        ItemInfolPane = new javax.swing.JScrollPane();
        ItemInfoList = new javax.swing.JList<>();
        lblItemInfoPrice = new javax.swing.JLabel();
        txtItemInfoName = new javax.swing.JTextField();
        lblItemInfoDescription = new javax.swing.JLabel();
        txtItemInfoStock = new javax.swing.JTextField();
        lblItemInfoStock = new javax.swing.JLabel();
        txtItemInfoDescription = new javax.swing.JTextField();
        lblItemInfoAmount = new javax.swing.JLabel();
        txtItemInfoAmount = new javax.swing.JTextField();
        lblItemInfoName = new javax.swing.JLabel();
        txtItemInfoPrice = new javax.swing.JTextField();
        lblItemInformation = new javax.swing.JLabel();
        lblItemSales = new javax.swing.JLabel();
        ItemSalesPanel = new javax.swing.JPanel();
        lblItemSalesQuantity = new javax.swing.JLabel();
        txtItemSalesId = new javax.swing.JTextField();
        lblItemSalesId = new javax.swing.JLabel();
        txtItemSalesQuantity = new javax.swing.JTextField();
        ItemSalesComboBox = new javax.swing.JComboBox<>();
        btnAddSales = new javax.swing.JButton();
        btnClearSales = new javax.swing.JButton();
        lblItemSalesPayment = new javax.swing.JLabel();
        txtItemSalesPayment = new javax.swing.JTextField();
        btnGenerateSalesBill = new javax.swing.JButton();
        EmployeeSalesComboBox = new javax.swing.JComboBox<>();
        SalesTablelPane = new javax.swing.JScrollPane();
        SalesTable = new javax.swing.JTable();
        errorMsgSales = new javax.swing.JLabel();
        CheckOutPanel = new javax.swing.JPanel();
        lblCheckOut = new javax.swing.JLabel();
        BillInfoPanel = new javax.swing.JPanel();
        lblAmountDue = new javax.swing.JLabel();
        lblBalance = new javax.swing.JLabel();
        lblDiscount = new javax.swing.JLabel();
        lblAmount = new javax.swing.JLabel();
        lblpercent = new javax.swing.JLabel();
        lblpayable = new javax.swing.JLabel();
        txtEnterPercent = new javax.swing.JTextField();
        txtShowAmount = new javax.swing.JTextField();
        lblShowAmountDue = new javax.swing.JLabel();
        lblShowBalance = new javax.swing.JLabel();
        lblShowPayable = new javax.swing.JLabel();
        lblCash = new javax.swing.JLabel();
        txtCash = new javax.swing.JTextField();
        btnPrintBill = new javax.swing.JButton();
        btnCancelBill = new javax.swing.JButton();
        BilllPane = new javax.swing.JScrollPane();
        BillList = new javax.swing.JList<>();
        EmployeesPanel = new javax.swing.JPanel();
        lblEmployee = new javax.swing.JLabel();
        lblEmployeeId = new javax.swing.JLabel();
        lblEmployeeName = new javax.swing.JLabel();
        lblEmployeeLastName = new javax.swing.JLabel();
        lblEmployeeEmail = new javax.swing.JLabel();
        lblEmployeePhone = new javax.swing.JLabel();
        lblEmployeeAddress = new javax.swing.JLabel();
        lblEmployeePosition = new javax.swing.JLabel();
        txtEmployeeId = new javax.swing.JTextField();
        txtEmployeeName = new javax.swing.JTextField();
        txtEmployeeLastName = new javax.swing.JTextField();
        txtEmployeeEmail = new javax.swing.JTextField();
        txtEmployeePhone = new javax.swing.JTextField();
        txtEmployeeAddress = new javax.swing.JTextField();
        txtEmployeePosition = new javax.swing.JTextField();
        btnAddEmployee = new javax.swing.JButton();
        btnCancelEmployee = new javax.swing.JButton();
        btnUpdateEmployee = new javax.swing.JButton();
        btnDeleteEmployee = new javax.swing.JButton();
        EmployeePane = new javax.swing.JScrollPane();
        EmployeeTable = new javax.swing.JTable();
        lblEmployeeSalary = new javax.swing.JLabel();
        txtEmployeeSalary = new javax.swing.JTextField();
        errorMsgEmployee = new javax.swing.JLabel();
        MenuBar = new javax.swing.JMenuBar();
        Menu1 = new javax.swing.JMenu();
        managehome = new javax.swing.JMenuItem();
        Menu2 = new javax.swing.JMenu();
        manageItems = new javax.swing.JMenuItem();
        Menu3 = new javax.swing.JMenu();
        manageInventory = new javax.swing.JMenuItem();
        Menu4 = new javax.swing.JMenu();
        manageSales = new javax.swing.JMenuItem();
        Menu5 = new javax.swing.JMenu();
        manageCheckout = new javax.swing.JMenuItem();
        Menu6 = new javax.swing.JMenu();
        manageEmployees = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        getContentPane().setLayout(new java.awt.CardLayout());

        HomepagePanel.setBackground(new java.awt.Color(0, 153, 51));

        lblHome.setFont(new java.awt.Font("Tahoma", 1, 62)); // NOI18N
        lblHome.setForeground(new java.awt.Color(255, 255, 255));
        lblHome.setText("Clothing Retail Shop");

        javax.swing.GroupLayout HomepagePanelLayout = new javax.swing.GroupLayout(HomepagePanel);
        HomepagePanel.setLayout(HomepagePanelLayout);
        HomepagePanelLayout.setHorizontalGroup(
            HomepagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HomepagePanelLayout.createSequentialGroup()
                .addContainerGap(203, Short.MAX_VALUE)
                .addComponent(lblHome, javax.swing.GroupLayout.PREFERRED_SIZE, 695, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(189, 189, 189))
        );
        HomepagePanelLayout.setVerticalGroup(
            HomepagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HomepagePanelLayout.createSequentialGroup()
                .addGap(155, 155, 155)
                .addComponent(lblHome, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(144, Short.MAX_VALUE))
        );

        getContentPane().add(HomepagePanel, "card3");

        AddItemsPanel.setBackground(new java.awt.Color(0, 153, 51));

        lblAddItems.setBackground(new java.awt.Color(255, 255, 255));
        lblAddItems.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        lblAddItems.setForeground(new java.awt.Color(255, 255, 255));
        lblAddItems.setText("Add Items Menu");

        lblId.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblId.setForeground(new java.awt.Color(255, 255, 255));
        lblId.setText("Code");

        lblname.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblname.setForeground(new java.awt.Color(255, 255, 255));
        lblname.setText("Name");

        lbldescription.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lbldescription.setForeground(new java.awt.Color(255, 255, 255));
        lbldescription.setText("Description");

        lblrdate.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblrdate.setForeground(new java.awt.Color(255, 255, 255));
        lblrdate.setText("Received Date");

        lblbrand.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblbrand.setForeground(new java.awt.Color(255, 255, 255));
        lblbrand.setText("Brand");

        lblbprice.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblbprice.setForeground(new java.awt.Color(255, 255, 255));
        lblbprice.setText("Buying Price");

        lblsprice.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblsprice.setForeground(new java.awt.Color(255, 255, 255));
        lblsprice.setText("Selling Price");

        lblquantity.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblquantity.setForeground(new java.awt.Color(255, 255, 255));
        lblquantity.setText("Quantity");

        txtItemsId.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        txtItemsName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        txtItemsDescription.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        txtItemsRdate.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        txtItemsBrand.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        txtItemsBprice.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        txtItemsSprice.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        txtItemsQuantity.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        ItemsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Name", "Description", "Received Date", "Brand", "Buying Price", "Selling Price", "Quantity"
            }
        ));
        ItemsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ItemsTableMouseClicked(evt);
            }
        });
        jScrollPaneItems.setViewportView(ItemsTable);

        btnSaveItems.setBackground(new java.awt.Color(255, 255, 255));
        btnSaveItems.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnSaveItems.setForeground(new java.awt.Color(0, 153, 51));
        btnSaveItems.setText("Save");
        btnSaveItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveItemsActionPerformed(evt);
            }
        });

        btnClearItems.setBackground(new java.awt.Color(255, 255, 255));
        btnClearItems.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnClearItems.setForeground(new java.awt.Color(0, 153, 51));
        btnClearItems.setText("Clear");
        btnClearItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearItemsActionPerformed(evt);
            }
        });

        btnUpdateItems.setBackground(new java.awt.Color(255, 255, 255));
        btnUpdateItems.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnUpdateItems.setForeground(new java.awt.Color(0, 153, 51));
        btnUpdateItems.setText("Update");
        btnUpdateItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateItemsActionPerformed(evt);
            }
        });

        btnDeleteItems.setBackground(new java.awt.Color(255, 255, 255));
        btnDeleteItems.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnDeleteItems.setForeground(new java.awt.Color(0, 153, 51));
        btnDeleteItems.setText("Delete");
        btnDeleteItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteItemsActionPerformed(evt);
            }
        });

        btnAddInventory.setBackground(new java.awt.Color(255, 255, 255));
        btnAddInventory.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnAddInventory.setForeground(new java.awt.Color(0, 153, 51));
        btnAddInventory.setText("Add Inventory");
        btnAddInventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddInventoryActionPerformed(evt);
            }
        });

        errorMsgItems.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        errorMsgItems.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout AddItemsPanelLayout = new javax.swing.GroupLayout(AddItemsPanel);
        AddItemsPanel.setLayout(AddItemsPanelLayout);
        AddItemsPanelLayout.setHorizontalGroup(
            AddItemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddItemsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AddItemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbldescription)
                    .addComponent(lblId)
                    .addComponent(lblname)
                    .addComponent(lblrdate)
                    .addComponent(lblbrand)
                    .addComponent(lblbprice)
                    .addComponent(lblquantity)
                    .addGroup(AddItemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnSaveItems)
                        .addComponent(lblsprice)))
                .addGroup(AddItemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AddItemsPanelLayout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addComponent(btnClearItems)
                        .addGap(127, 127, 127)
                        .addComponent(btnUpdateItems)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 209, Short.MAX_VALUE)
                        .addComponent(btnDeleteItems)
                        .addGap(124, 124, 124)
                        .addComponent(btnAddInventory)
                        .addGap(74, 74, 74))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AddItemsPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(AddItemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(AddItemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtItemsBrand, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                                .addComponent(txtItemsBprice)
                                .addComponent(txtItemsSprice)
                                .addComponent(txtItemsQuantity)
                                .addComponent(txtItemsRdate)
                                .addComponent(txtItemsDescription))
                            .addGroup(AddItemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtItemsName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                                .addComponent(txtItemsId, javax.swing.GroupLayout.Alignment.LEADING)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(AddItemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAddItems)
                            .addGroup(AddItemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(errorMsgItems, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPaneItems, javax.swing.GroupLayout.DEFAULT_SIZE, 641, Short.MAX_VALUE)))
                        .addGap(24, 24, 24))))
        );
        AddItemsPanelLayout.setVerticalGroup(
            AddItemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddItemsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAddItems)
                .addGap(55, 55, 55)
                .addGroup(AddItemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AddItemsPanelLayout.createSequentialGroup()
                        .addGroup(AddItemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtItemsId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblId))
                        .addGap(18, 18, 18)
                        .addGroup(AddItemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblname)
                            .addComponent(txtItemsName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(AddItemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbldescription)
                            .addComponent(txtItemsDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(AddItemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblrdate)
                            .addComponent(txtItemsRdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(AddItemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblbrand)
                            .addComponent(txtItemsBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(AddItemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblbprice)
                            .addComponent(txtItemsBprice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(AddItemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblsprice)
                            .addComponent(txtItemsSprice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(AddItemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblquantity)
                            .addComponent(txtItemsQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPaneItems, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errorMsgItems, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(AddItemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSaveItems)
                    .addComponent(btnClearItems)
                    .addComponent(btnUpdateItems)
                    .addComponent(btnDeleteItems)
                    .addComponent(btnAddInventory))
                .addGap(38, 38, 38))
        );

        getContentPane().add(AddItemsPanel, "card4");

        InventoryPanel.setBackground(new java.awt.Color(0, 153, 51));

        lblInventory.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        lblInventory.setForeground(new java.awt.Color(255, 255, 255));
        lblInventory.setText("Inventory  Menu");

        lblInvId.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblInvId.setForeground(new java.awt.Color(255, 255, 255));
        lblInvId.setText("Item ID");

        lblInvName.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblInvName.setForeground(new java.awt.Color(255, 255, 255));
        lblInvName.setText("Name");

        lblInvDescription.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblInvDescription.setForeground(new java.awt.Color(255, 255, 255));
        lblInvDescription.setText("Description");

        lblInvUpdateAt.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblInvUpdateAt.setForeground(new java.awt.Color(255, 255, 255));
        lblInvUpdateAt.setText("Update at");

        lblInvBrand.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblInvBrand.setForeground(new java.awt.Color(255, 255, 255));
        lblInvBrand.setText("Brand");

        lblInvBprice.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblInvBprice.setForeground(new java.awt.Color(255, 255, 255));
        lblInvBprice.setText("Buying Price");

        lblInvSprice.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblInvSprice.setForeground(new java.awt.Color(255, 255, 255));
        lblInvSprice.setText("Selling Price");

        lblInvQuantity.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblInvQuantity.setForeground(new java.awt.Color(255, 255, 255));
        lblInvQuantity.setText("Quantity");

        errorMsgInventory.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        errorMsgInventory.setForeground(new java.awt.Color(255, 255, 255));

        txtInventoryItemId.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        txtInventoryName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        txtInventoryDescription.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        txtInventoryUpdateAt.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        txtInventoryBrand.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        txtInventoryBprice.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        txtInventorySprice.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        txtInventoryQuantity.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        InventoryTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        InventoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Name", "Description", "Updated at", "Brand", "Buying Price", "Selling Price", "Quantity"
            }
        ));
        InventoryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                InventoryTableMouseClicked(evt);
            }
        });
        jScrollPaneInventory.setViewportView(InventoryTable);

        btnSaveInventory.setBackground(new java.awt.Color(255, 255, 255));
        btnSaveInventory.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnSaveInventory.setForeground(new java.awt.Color(0, 153, 51));
        btnSaveInventory.setText("Save");
        btnSaveInventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveInventoryActionPerformed(evt);
            }
        });

        btnClearInventory.setBackground(new java.awt.Color(255, 255, 255));
        btnClearInventory.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnClearInventory.setForeground(new java.awt.Color(0, 153, 51));
        btnClearInventory.setText("Clear");
        btnClearInventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearInventoryActionPerformed(evt);
            }
        });

        btnUpdateIventory.setBackground(new java.awt.Color(255, 255, 255));
        btnUpdateIventory.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnUpdateIventory.setForeground(new java.awt.Color(0, 153, 51));
        btnUpdateIventory.setText("Update");
        btnUpdateIventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateIventoryActionPerformed(evt);
            }
        });

        btnDeleteInventory.setBackground(new java.awt.Color(255, 255, 255));
        btnDeleteInventory.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnDeleteInventory.setForeground(new java.awt.Color(0, 153, 51));
        btnDeleteInventory.setText("Delete");
        btnDeleteInventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteInventoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout InventoryPanelLayout = new javax.swing.GroupLayout(InventoryPanel);
        InventoryPanel.setLayout(InventoryPanelLayout);
        InventoryPanelLayout.setHorizontalGroup(
            InventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InventoryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(InventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblInvBprice)
                    .addComponent(lblInvBrand)
                    .addComponent(lblInvSprice)
                    .addComponent(lblInvQuantity)
                    .addComponent(lblInvUpdateAt)
                    .addComponent(lblInvDescription)
                    .addComponent(lblInvName)
                    .addComponent(lblInvId))
                .addGap(18, 18, 18)
                .addGroup(InventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(InventoryPanelLayout.createSequentialGroup()
                        .addComponent(btnSaveInventory)
                        .addGap(78, 78, 78)
                        .addComponent(btnClearInventory)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnUpdateIventory)
                        .addGap(79, 79, 79)
                        .addComponent(btnDeleteInventory)
                        .addGap(69, 69, 69))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InventoryPanelLayout.createSequentialGroup()
                        .addGroup(InventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtInventoryUpdateAt)
                            .addComponent(txtInventoryQuantity, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                            .addComponent(txtInventorySprice)
                            .addComponent(txtInventoryBrand)
                            .addComponent(txtInventoryBprice)
                            .addComponent(txtInventoryItemId)
                            .addComponent(txtInventoryName)
                            .addComponent(txtInventoryDescription))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 145, Short.MAX_VALUE)
                        .addGroup(InventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblInventory)
                            .addGroup(InventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InventoryPanelLayout.createSequentialGroup()
                                    .addComponent(errorMsgInventory, javax.swing.GroupLayout.PREFERRED_SIZE, 649, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addContainerGap())
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InventoryPanelLayout.createSequentialGroup()
                                    .addComponent(jScrollPaneInventory, javax.swing.GroupLayout.PREFERRED_SIZE, 649, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(24, 24, 24)))))))
        );
        InventoryPanelLayout.setVerticalGroup(
            InventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InventoryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblInventory)
                .addGap(48, 48, 48)
                .addGroup(InventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(InventoryPanelLayout.createSequentialGroup()
                        .addGroup(InventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(InventoryPanelLayout.createSequentialGroup()
                                .addGroup(InventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblInvId)
                                    .addComponent(txtInventoryItemId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(lblInvName))
                            .addComponent(txtInventoryName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(InventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblInvDescription)
                            .addComponent(txtInventoryDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(InventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblInvUpdateAt)
                            .addComponent(txtInventoryUpdateAt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(InventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblInvBrand)
                            .addComponent(txtInventoryBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(InventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblInvBprice)
                            .addComponent(txtInventoryBprice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(InventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblInvSprice)
                            .addComponent(txtInventorySprice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(InventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblInvQuantity)
                            .addComponent(txtInventoryQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPaneInventory, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(errorMsgInventory, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(InventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSaveInventory)
                    .addComponent(btnClearInventory)
                    .addComponent(btnUpdateIventory)
                    .addComponent(btnDeleteInventory))
                .addGap(51, 51, 51))
        );

        getContentPane().add(InventoryPanel, "card5");

        SalesPanel.setBackground(new java.awt.Color(0, 153, 51));

        lblSales.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        lblSales.setForeground(new java.awt.Color(255, 255, 255));
        lblSales.setText("Sales Menu ");

        ItemInformationPanel.setBackground(new java.awt.Color(255, 255, 255));

        lblItemInfoId.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblItemInfoId.setForeground(new java.awt.Color(0, 153, 51));
        lblItemInfoId.setText("Item ID");

        txtItemInfoId.setBackground(new java.awt.Color(153, 255, 153));
        txtItemInfoId.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtItemInfoId.setText("\n");

        ItemInfoList.setBackground(new java.awt.Color(153, 255, 153));
        ItemInfoList.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ItemInfoList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { " " };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        ItemInfolPane.setViewportView(ItemInfoList);

        lblItemInfoPrice.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblItemInfoPrice.setForeground(new java.awt.Color(0, 153, 51));
        lblItemInfoPrice.setText("Price");

        txtItemInfoName.setBackground(new java.awt.Color(153, 255, 153));
        txtItemInfoName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        lblItemInfoDescription.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblItemInfoDescription.setForeground(new java.awt.Color(0, 153, 51));
        lblItemInfoDescription.setText("Description");

        txtItemInfoStock.setBackground(new java.awt.Color(153, 255, 153));
        txtItemInfoStock.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        lblItemInfoStock.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblItemInfoStock.setForeground(new java.awt.Color(0, 153, 51));
        lblItemInfoStock.setText("Available Stock");

        txtItemInfoDescription.setBackground(new java.awt.Color(153, 255, 153));
        txtItemInfoDescription.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        lblItemInfoAmount.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblItemInfoAmount.setForeground(new java.awt.Color(0, 153, 51));
        lblItemInfoAmount.setText("Amount");

        txtItemInfoAmount.setBackground(new java.awt.Color(153, 255, 153));
        txtItemInfoAmount.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtItemInfoAmount.setText("\n");

        lblItemInfoName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblItemInfoName.setForeground(new java.awt.Color(0, 153, 51));
        lblItemInfoName.setText("Name");

        txtItemInfoPrice.setBackground(new java.awt.Color(153, 255, 153));
        txtItemInfoPrice.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        javax.swing.GroupLayout ItemInformationPanelLayout = new javax.swing.GroupLayout(ItemInformationPanel);
        ItemInformationPanel.setLayout(ItemInformationPanelLayout);
        ItemInformationPanelLayout.setHorizontalGroup(
            ItemInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ItemInformationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ItemInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtItemInfoId)
                    .addComponent(lblItemInfoId, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(ItemInfolPane))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(ItemInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblItemInfoDescription, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblItemInfoAmount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblItemInfoStock, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblItemInfoPrice, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblItemInfoName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(ItemInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtItemInfoDescription, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtItemInfoName)
                    .addComponent(txtItemInfoStock)
                    .addComponent(txtItemInfoAmount, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(txtItemInfoPrice))
                .addGap(19, 19, 19))
        );
        ItemInformationPanelLayout.setVerticalGroup(
            ItemInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ItemInformationPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(ItemInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ItemInformationPanelLayout.createSequentialGroup()
                        .addComponent(lblItemInfoId)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtItemInfoId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ItemInfolPane, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ItemInformationPanelLayout.createSequentialGroup()
                        .addGroup(ItemInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtItemInfoName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblItemInfoName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(ItemInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtItemInfoPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblItemInfoPrice))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ItemInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblItemInfoStock, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtItemInfoStock, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(ItemInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtItemInfoDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblItemInfoDescription))
                        .addGap(18, 18, 18)
                        .addGroup(ItemInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblItemInfoAmount, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtItemInfoAmount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19))))
        );

        lblItemInformation.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblItemInformation.setForeground(new java.awt.Color(255, 255, 255));
        lblItemInformation.setText("Item's Information");

        lblItemSales.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblItemSales.setForeground(new java.awt.Color(255, 255, 255));
        lblItemSales.setText("Sales's Manager");

        ItemSalesPanel.setBackground(new java.awt.Color(255, 255, 255));

        lblItemSalesQuantity.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblItemSalesQuantity.setForeground(new java.awt.Color(0, 153, 51));
        lblItemSalesQuantity.setText("Quantity");

        txtItemSalesId.setBackground(new java.awt.Color(153, 255, 153));
        txtItemSalesId.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtItemSalesId.setText("\n");

        lblItemSalesId.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblItemSalesId.setForeground(new java.awt.Color(0, 153, 51));
        lblItemSalesId.setText("Item ID");

        txtItemSalesQuantity.setBackground(new java.awt.Color(153, 255, 153));
        txtItemSalesQuantity.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtItemSalesQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtItemSalesQuantityKeyReleased(evt);
            }
        });

        ItemSalesComboBox.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ItemSalesComboBox.setForeground(new java.awt.Color(0, 153, 51));
        ItemSalesComboBox.setMaximumRowCount(10);
        ItemSalesComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select an Item" }));
        ItemSalesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemSalesComboBoxActionPerformed(evt);
            }
        });

        btnAddSales.setBackground(new java.awt.Color(0, 153, 51));
        btnAddSales.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnAddSales.setForeground(new java.awt.Color(255, 255, 255));
        btnAddSales.setText("Add");
        btnAddSales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddSalesActionPerformed(evt);
            }
        });

        btnClearSales.setBackground(new java.awt.Color(0, 153, 51));
        btnClearSales.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnClearSales.setForeground(new java.awt.Color(255, 255, 255));
        btnClearSales.setText("Clear");
        btnClearSales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearSalesActionPerformed(evt);
            }
        });

        lblItemSalesPayment.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblItemSalesPayment.setForeground(new java.awt.Color(0, 153, 51));
        lblItemSalesPayment.setText("Total Payment  ");

        txtItemSalesPayment.setBackground(new java.awt.Color(153, 255, 153));
        txtItemSalesPayment.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        btnGenerateSalesBill.setBackground(new java.awt.Color(0, 153, 51));
        btnGenerateSalesBill.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnGenerateSalesBill.setForeground(new java.awt.Color(255, 255, 255));
        btnGenerateSalesBill.setText("Generate Bill");
        btnGenerateSalesBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateSalesBillActionPerformed(evt);
            }
        });

        EmployeeSalesComboBox.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        EmployeeSalesComboBox.setForeground(new java.awt.Color(0, 153, 51));
        EmployeeSalesComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " Employee Id" }));

        javax.swing.GroupLayout ItemSalesPanelLayout = new javax.swing.GroupLayout(ItemSalesPanel);
        ItemSalesPanel.setLayout(ItemSalesPanelLayout);
        ItemSalesPanelLayout.setHorizontalGroup(
            ItemSalesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ItemSalesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ItemSalesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ItemSalesPanelLayout.createSequentialGroup()
                        .addComponent(lblItemSalesPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(ItemSalesPanelLayout.createSequentialGroup()
                        .addGroup(ItemSalesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtItemSalesPayment, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ItemSalesComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(ItemSalesPanelLayout.createSequentialGroup()
                                .addComponent(lblItemSalesId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtItemSalesId, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(ItemSalesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ItemSalesPanelLayout.createSequentialGroup()
                                .addGroup(ItemSalesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(ItemSalesPanelLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnAddSales))
                                    .addGroup(ItemSalesPanelLayout.createSequentialGroup()
                                        .addGap(44, 44, 44)
                                        .addComponent(lblItemSalesQuantity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(18, 18, 18)
                                .addComponent(txtItemSalesQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ItemSalesPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(ItemSalesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ItemSalesPanelLayout.createSequentialGroup()
                                        .addComponent(btnClearSales)
                                        .addGap(19, 19, 19))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ItemSalesPanelLayout.createSequentialGroup()
                                        .addGroup(ItemSalesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(EmployeeSalesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnGenerateSalesBill))
                                        .addGap(36, 36, 36))))))))
        );
        ItemSalesPanelLayout.setVerticalGroup(
            ItemSalesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ItemSalesPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(ItemSalesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblItemSalesId)
                    .addComponent(txtItemSalesId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblItemSalesQuantity)
                    .addComponent(txtItemSalesQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(ItemSalesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ItemSalesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddSales)
                    .addComponent(btnClearSales))
                .addGap(32, 32, 32)
                .addComponent(lblItemSalesPayment)
                .addGap(18, 18, 18)
                .addGroup(ItemSalesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ItemSalesPanelLayout.createSequentialGroup()
                        .addComponent(EmployeeSalesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnGenerateSalesBill))
                    .addComponent(txtItemSalesPayment))
                .addContainerGap())
        );

        SalesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sale ID", "Item ID", "Item Name", "Quantity", "Price", "Amount"
            }
        ));
        SalesTablelPane.setViewportView(SalesTable);

        errorMsgSales.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        errorMsgSales.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout SalesPanelLayout = new javax.swing.GroupLayout(SalesPanel);
        SalesPanel.setLayout(SalesPanelLayout);
        SalesPanelLayout.setHorizontalGroup(
            SalesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SalesPanelLayout.createSequentialGroup()
                .addGroup(SalesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SalesPanelLayout.createSequentialGroup()
                        .addGap(424, 424, 424)
                        .addComponent(lblSales))
                    .addGroup(SalesPanelLayout.createSequentialGroup()
                        .addGap(302, 302, 302)
                        .addComponent(SalesTablelPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SalesPanelLayout.createSequentialGroup()
                .addGroup(SalesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(SalesPanelLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(ItemInformationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ItemSalesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5))
                    .addGroup(SalesPanelLayout.createSequentialGroup()
                        .addGap(134, 134, 134)
                        .addComponent(lblItemInformation, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(78, 78, 78)
                        .addComponent(errorMsgSales, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(142, 142, 142)
                        .addComponent(lblItemSales, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 91, Short.MAX_VALUE)))
                .addGap(145, 145, 145))
        );
        SalesPanelLayout.setVerticalGroup(
            SalesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SalesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblSales)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SalesTablelPane, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(SalesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(errorMsgSales, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(SalesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblItemSales)
                        .addComponent(lblItemInformation)))
                .addGap(18, 18, 18)
                .addGroup(SalesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ItemInformationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ItemSalesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );

        getContentPane().add(SalesPanel, "card6");

        CheckOutPanel.setBackground(new java.awt.Color(0, 153, 51));

        lblCheckOut.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        lblCheckOut.setForeground(new java.awt.Color(255, 255, 255));
        lblCheckOut.setText("Check Out Menu");

        BillInfoPanel.setBackground(new java.awt.Color(255, 255, 255));

        lblAmountDue.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblAmountDue.setForeground(new java.awt.Color(0, 153, 51));
        lblAmountDue.setText("Amount Due");

        lblBalance.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblBalance.setForeground(new java.awt.Color(0, 153, 51));
        lblBalance.setText("Balance");

        lblDiscount.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblDiscount.setForeground(new java.awt.Color(0, 153, 51));
        lblDiscount.setText("Discount");

        lblAmount.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblAmount.setForeground(new java.awt.Color(0, 153, 51));
        lblAmount.setText("Amount");

        lblpercent.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblpercent.setForeground(new java.awt.Color(0, 153, 51));
        lblpercent.setText("%");

        lblpayable.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblpayable.setForeground(new java.awt.Color(0, 153, 51));
        lblpayable.setText("Payable");

        txtEnterPercent.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtEnterPercent.setForeground(new java.awt.Color(0, 153, 51));
        txtEnterPercent.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtEnterPercentKeyReleased(evt);
            }
        });

        txtShowAmount.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtShowAmount.setForeground(new java.awt.Color(0, 153, 51));
        txtShowAmount.setText("0.00");

        lblShowAmountDue.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblShowAmountDue.setForeground(new java.awt.Color(255, 51, 0));
        lblShowAmountDue.setText("0.00");

        lblShowBalance.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblShowBalance.setForeground(new java.awt.Color(255, 51, 0));
        lblShowBalance.setText("0.00");

        lblShowPayable.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblShowPayable.setForeground(new java.awt.Color(255, 51, 0));
        lblShowPayable.setText("0.00");

        javax.swing.GroupLayout BillInfoPanelLayout = new javax.swing.GroupLayout(BillInfoPanel);
        BillInfoPanel.setLayout(BillInfoPanelLayout);
        BillInfoPanelLayout.setHorizontalGroup(
            BillInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BillInfoPanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(BillInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lblAmountDue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblShowAmountDue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblBalance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblShowBalance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(73, 73, 73)
                .addGroup(BillInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtEnterPercent, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtShowAmount)
                    .addComponent(lblShowPayable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblDiscount, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                .addGap(47, 47, 47)
                .addGroup(BillInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblAmount, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
                    .addComponent(lblpercent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblpayable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        BillInfoPanelLayout.setVerticalGroup(
            BillInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BillInfoPanelLayout.createSequentialGroup()
                .addGroup(BillInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BillInfoPanelLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(lblAmountDue)
                        .addGap(26, 26, 26)
                        .addComponent(lblShowAmountDue))
                    .addGroup(BillInfoPanelLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(lblDiscount)
                        .addGap(18, 18, 18)
                        .addGroup(BillInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblAmount)
                            .addComponent(txtShowAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(BillInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BillInfoPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtEnterPercent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(BillInfoPanelLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(lblBalance))
                    .addGroup(BillInfoPanelLayout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(lblpercent)))
                .addGap(37, 37, 37)
                .addGroup(BillInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblShowBalance)
                    .addComponent(lblShowPayable)
                    .addComponent(lblpayable))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblCash.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblCash.setForeground(new java.awt.Color(255, 255, 255));
        lblCash.setText("Cash");

        txtCash.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtCash.setText("\n");
        txtCash.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCashKeyReleased(evt);
            }
        });

        btnPrintBill.setBackground(new java.awt.Color(255, 255, 255));
        btnPrintBill.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnPrintBill.setForeground(new java.awt.Color(0, 153, 51));
        btnPrintBill.setText("Print");
        btnPrintBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintBillActionPerformed(evt);
            }
        });

        btnCancelBill.setBackground(new java.awt.Color(255, 255, 255));
        btnCancelBill.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnCancelBill.setForeground(new java.awt.Color(0, 153, 51));
        btnCancelBill.setText("Cancel");
        btnCancelBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelBillActionPerformed(evt);
            }
        });

        BillList.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        BilllPane.setViewportView(BillList);

        javax.swing.GroupLayout CheckOutPanelLayout = new javax.swing.GroupLayout(CheckOutPanel);
        CheckOutPanel.setLayout(CheckOutPanelLayout);
        CheckOutPanelLayout.setHorizontalGroup(
            CheckOutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CheckOutPanelLayout.createSequentialGroup()
                .addGroup(CheckOutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CheckOutPanelLayout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addGroup(CheckOutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(CheckOutPanelLayout.createSequentialGroup()
                                .addComponent(lblCash, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addGroup(CheckOutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(CheckOutPanelLayout.createSequentialGroup()
                                        .addComponent(btnPrintBill, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnCancelBill))
                                    .addComponent(txtCash, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(CheckOutPanelLayout.createSequentialGroup()
                                .addComponent(BillInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(87, 87, 87)
                                .addComponent(BilllPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(CheckOutPanelLayout.createSequentialGroup()
                        .addGap(332, 332, 332)
                        .addComponent(lblCheckOut)))
                .addContainerGap(184, Short.MAX_VALUE))
        );
        CheckOutPanelLayout.setVerticalGroup(
            CheckOutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CheckOutPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblCheckOut)
                .addGap(55, 55, 55)
                .addGroup(CheckOutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BillInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BilllPane, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(CheckOutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCash)
                    .addComponent(txtCash, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(CheckOutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelBill)
                    .addComponent(btnPrintBill))
                .addContainerGap(94, Short.MAX_VALUE))
        );

        getContentPane().add(CheckOutPanel, "card7");

        EmployeesPanel.setBackground(new java.awt.Color(0, 153, 51));
        EmployeesPanel.setForeground(new java.awt.Color(0, 153, 51));

        lblEmployee.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        lblEmployee.setForeground(new java.awt.Color(255, 255, 255));
        lblEmployee.setText("Employee's Menu");

        lblEmployeeId.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblEmployeeId.setForeground(new java.awt.Color(255, 255, 255));
        lblEmployeeId.setText("Employee ID");

        lblEmployeeName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblEmployeeName.setForeground(new java.awt.Color(255, 255, 255));
        lblEmployeeName.setText("Name");

        lblEmployeeLastName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblEmployeeLastName.setForeground(new java.awt.Color(255, 255, 255));
        lblEmployeeLastName.setText("Last Name");

        lblEmployeeEmail.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblEmployeeEmail.setForeground(new java.awt.Color(255, 255, 255));
        lblEmployeeEmail.setText("Email");

        lblEmployeePhone.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblEmployeePhone.setForeground(new java.awt.Color(255, 255, 255));
        lblEmployeePhone.setText("Phone");

        lblEmployeeAddress.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblEmployeeAddress.setForeground(new java.awt.Color(255, 255, 255));
        lblEmployeeAddress.setText("Address");

        lblEmployeePosition.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblEmployeePosition.setForeground(new java.awt.Color(255, 255, 255));
        lblEmployeePosition.setText("Position");

        txtEmployeeId.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        txtEmployeeName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        txtEmployeeLastName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        txtEmployeeEmail.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        txtEmployeePhone.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        txtEmployeeAddress.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        txtEmployeePosition.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        btnAddEmployee.setBackground(new java.awt.Color(255, 255, 255));
        btnAddEmployee.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnAddEmployee.setForeground(new java.awt.Color(0, 153, 51));
        btnAddEmployee.setText("Add");
        btnAddEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddEmployeeActionPerformed(evt);
            }
        });

        btnCancelEmployee.setBackground(new java.awt.Color(255, 255, 255));
        btnCancelEmployee.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnCancelEmployee.setForeground(new java.awt.Color(0, 153, 51));
        btnCancelEmployee.setText("Cancel");
        btnCancelEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelEmployeeActionPerformed(evt);
            }
        });

        btnUpdateEmployee.setBackground(new java.awt.Color(255, 255, 255));
        btnUpdateEmployee.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnUpdateEmployee.setForeground(new java.awt.Color(0, 153, 51));
        btnUpdateEmployee.setText("Update");
        btnUpdateEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateEmployeeActionPerformed(evt);
            }
        });

        btnDeleteEmployee.setBackground(new java.awt.Color(255, 255, 255));
        btnDeleteEmployee.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnDeleteEmployee.setForeground(new java.awt.Color(0, 153, 51));
        btnDeleteEmployee.setText("Delete");
        btnDeleteEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteEmployeeActionPerformed(evt);
            }
        });

        EmployeeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee ID", "Name", "Last Name", "Email", "Phone", "Address", "Position", "Salary"
            }
        ));
        EmployeeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EmployeeTableMouseClicked(evt);
            }
        });
        EmployeePane.setViewportView(EmployeeTable);

        lblEmployeeSalary.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblEmployeeSalary.setForeground(new java.awt.Color(255, 255, 255));
        lblEmployeeSalary.setText("Salary");

        txtEmployeeSalary.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        errorMsgEmployee.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        errorMsgEmployee.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout EmployeesPanelLayout = new javax.swing.GroupLayout(EmployeesPanel);
        EmployeesPanel.setLayout(EmployeesPanelLayout);
        EmployeesPanelLayout.setHorizontalGroup(
            EmployeesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EmployeesPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lblEmployee)
                .addGap(371, 371, 371))
            .addGroup(EmployeesPanelLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(EmployeesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnCancelEmployee)
                    .addGroup(EmployeesPanelLayout.createSequentialGroup()
                        .addGroup(EmployeesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblEmployeeName)
                            .addComponent(lblEmployeeId)
                            .addComponent(lblEmployeeLastName)
                            .addComponent(lblEmployeeEmail)
                            .addComponent(lblEmployeePhone)
                            .addComponent(lblEmployeeAddress)
                            .addComponent(lblEmployeePosition)
                            .addComponent(lblEmployeeSalary))
                        .addGap(58, 58, 58)
                        .addGroup(EmployeesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtEmployeeId, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                            .addComponent(txtEmployeeName)
                            .addComponent(txtEmployeeLastName)
                            .addComponent(txtEmployeeEmail)
                            .addComponent(txtEmployeePhone)
                            .addComponent(txtEmployeeAddress)
                            .addComponent(txtEmployeePosition)
                            .addComponent(txtEmployeeSalary)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, EmployeesPanelLayout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(btnAddEmployee)))
                .addGroup(EmployeesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(EmployeesPanelLayout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(EmployeePane, javax.swing.GroupLayout.PREFERRED_SIZE, 671, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EmployeesPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(EmployeesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EmployeesPanelLayout.createSequentialGroup()
                                .addComponent(errorMsgEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(174, 174, 174))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EmployeesPanelLayout.createSequentialGroup()
                                .addComponent(btnUpdateEmployee)
                                .addGap(82, 82, 82)
                                .addComponent(btnDeleteEmployee)
                                .addGap(101, 101, 101))))))
        );
        EmployeesPanelLayout.setVerticalGroup(
            EmployeesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EmployeesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblEmployee)
                .addGap(88, 88, 88)
                .addGroup(EmployeesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(EmployeesPanelLayout.createSequentialGroup()
                        .addGroup(EmployeesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEmployeeId)
                            .addComponent(txtEmployeeId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(EmployeesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEmployeeName)
                            .addComponent(txtEmployeeName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(EmployeesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEmployeeLastName)
                            .addComponent(txtEmployeeLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(EmployeesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEmployeeEmail)
                            .addComponent(txtEmployeeEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(EmployeesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEmployeePhone)
                            .addComponent(txtEmployeePhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(EmployeesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEmployeeAddress)
                            .addComponent(txtEmployeeAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(EmployeesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEmployeePosition)
                            .addComponent(txtEmployeePosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(EmployeePane, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(EmployeesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(errorMsgEmployee, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(EmployeesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblEmployeeSalary)
                        .addComponent(txtEmployeeSalary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addGroup(EmployeesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelEmployee)
                    .addComponent(btnAddEmployee)
                    .addComponent(btnUpdateEmployee)
                    .addComponent(btnDeleteEmployee))
                .addGap(43, 43, 43))
        );

        getContentPane().add(EmployeesPanel, "card8");

        Menu1.setText("Home");

        managehome.setText("Home Page");
        managehome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managehomeActionPerformed(evt);
            }
        });
        Menu1.add(managehome);

        MenuBar.add(Menu1);

        Menu2.setText("Items");

        manageItems.setText("Manage Items");
        manageItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageItemsActionPerformed(evt);
            }
        });
        Menu2.add(manageItems);

        MenuBar.add(Menu2);

        Menu3.setText("Inventory");

        manageInventory.setText("Manage Inventory");
        manageInventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageInventoryActionPerformed(evt);
            }
        });
        Menu3.add(manageInventory);

        MenuBar.add(Menu3);

        Menu4.setText("Sales");

        manageSales.setText("Manage Sales");
        manageSales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageSalesActionPerformed(evt);
            }
        });
        Menu4.add(manageSales);

        MenuBar.add(Menu4);

        Menu5.setText("Check Out");

        manageCheckout.setText("Check Out");
        manageCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageCheckoutActionPerformed(evt);
            }
        });
        Menu5.add(manageCheckout);

        MenuBar.add(Menu5);

        Menu6.setText("Employees");

        manageEmployees.setText("Manage Employees");
        manageEmployees.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageEmployeesActionPerformed(evt);
            }
        });
        Menu6.add(manageEmployees);

        MenuBar.add(Menu6);

        setJMenuBar(MenuBar);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveItemsActionPerformed
        //calling add items function
       save_items();
    }//GEN-LAST:event_btnSaveItemsActionPerformed

    private void btnClearItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearItemsActionPerformed
             // function that clears input fields when we cancel input or after we have added a set of inputs 
Functions.ClearItems(errorMsgItems,txtItemsId, txtItemsName, txtItemsDescription,
              txtItemsRdate, txtItemsBrand, txtItemsBprice, txtItemsSprice, txtItemsQuantity);
    }//GEN-LAST:event_btnClearItemsActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
   
// calling functions that read data from database
             show_items();
             
             show_inventory();
             
             show_combobox_items();
             show_combobox_employees();
             
             show_sales();
             
             show_employees();
    }//GEN-LAST:event_formComponentShown

    private void ItemsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ItemsTableMouseClicked
       
        // enter selected item information to respective textfields
               DefaultTableModel ItemsTableModel = (DefaultTableModel) ItemsTable.getModel();

               String id = ItemsTableModel.getValueAt(ItemsTable.getSelectedRow(), 0).toString();
               String name = ItemsTableModel.getValueAt(ItemsTable.getSelectedRow(), 1).toString();
               String description = ItemsTableModel.getValueAt(ItemsTable.getSelectedRow(), 2).toString();
               String date = ItemsTableModel.getValueAt(ItemsTable.getSelectedRow(), 3).toString();
               String brand = ItemsTableModel.getValueAt(ItemsTable.getSelectedRow(), 4).toString();
               String bprice = ItemsTableModel.getValueAt(ItemsTable.getSelectedRow(), 5).toString();
               String sprice = ItemsTableModel.getValueAt(ItemsTable.getSelectedRow(), 6).toString();
               String quantity = ItemsTableModel.getValueAt(ItemsTable.getSelectedRow(), 7).toString();

               txtItemsId.setText(id);
               txtItemsName.setText(name);
               txtItemsDescription.setText(description);
               txtItemsRdate.setText(date);
               txtItemsBrand.setText(brand);
               txtItemsBprice.setText(bprice);
               txtItemsSprice.setText(sprice);
               txtItemsQuantity.setText(quantity);

    }//GEN-LAST:event_ItemsTableMouseClicked

    private void btnUpdateItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateItemsActionPerformed
            //calling update items function
            update_items();
    }//GEN-LAST:event_btnUpdateItemsActionPerformed

    private void btnDeleteItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteItemsActionPerformed
       //calling delete items function
        delete_items();
    }//GEN-LAST:event_btnDeleteItemsActionPerformed

    private void btnAddInventoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddInventoryActionPerformed
        // add items to inventory
              if(ItemsTable.getSelectionModel().isSelectionEmpty()){
                  errorMsgItems.setText("Please select an item to add to inventory");
                  errorMsgItems.setVisible(true);
              }
              else{
                  
                   PreparedStatement psstatement;
           ResultSet getresults;
           String id = txtItemsId.getText();
           //read item_id from table inventory
           String sqlcheck = "SELECT `item_id` FROM `inventory` WHERE `item_id` =?";
           
            try{  
           psstatement= Mysql.getConnection().prepareStatement(sqlcheck); 
           
           psstatement.setString(1, id);
           getresults = psstatement.executeQuery();
           //if it exists we update the item information
if(getresults.next()){
    
                    //calling update inventory function
                       update_inventory_from_items();
                  //calling update items function
                        update_items();
              } else{  
              // if item does not exists in inventory we add it for the first time
                         add_items_to_inventory_if_not_exists();
}
            } catch(Exception except2){
                JOptionPane.showMessageDialog(null, "Item could not be added to inventory!");
                except2.printStackTrace();
                }
              }
    }//GEN-LAST:event_btnAddInventoryActionPerformed

    private void btnSaveInventoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveInventoryActionPerformed
        //calling save inventory function
        save_inventory();
    }//GEN-LAST:event_btnSaveInventoryActionPerformed

    private void btnClearInventoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearInventoryActionPerformed
       // function that clears input fields when we cancel input or after we have added a set of inputs 
Functions.ClearItems(errorMsgInventory,txtInventoryItemId, txtInventoryName, txtInventoryDescription,
              txtInventoryUpdateAt, txtInventoryBrand, txtInventoryBprice, txtInventorySprice, txtInventoryQuantity);
    }//GEN-LAST:event_btnClearInventoryActionPerformed

    private void InventoryTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_InventoryTableMouseClicked
       // enter selected item information to respective textfields
               DefaultTableModel InventoryTableModel = (DefaultTableModel) InventoryTable.getModel();

               String id = InventoryTableModel.getValueAt(InventoryTable.getSelectedRow(), 0).toString();
               String name = InventoryTableModel.getValueAt(InventoryTable.getSelectedRow(), 1).toString();
               String description = InventoryTableModel.getValueAt(InventoryTable.getSelectedRow(), 2).toString();
               String update_date = InventoryTableModel.getValueAt(InventoryTable.getSelectedRow(), 3).toString();
               String brand = InventoryTableModel.getValueAt(InventoryTable.getSelectedRow(), 4).toString();
               String bprice = InventoryTableModel.getValueAt(InventoryTable.getSelectedRow(), 5).toString();
               String sprice = InventoryTableModel.getValueAt(InventoryTable.getSelectedRow(), 6).toString();
               String quantity = InventoryTableModel.getValueAt(InventoryTable.getSelectedRow(), 7).toString();

               txtInventoryItemId.setText(id);
               txtInventoryName.setText(name);
               txtInventoryDescription.setText(description);
               txtInventoryUpdateAt.setText(update_date);
               txtInventoryBrand.setText(brand);
               txtInventoryBprice.setText(bprice);
               txtInventorySprice.setText(sprice);
               txtInventoryQuantity.setText(quantity);
    }//GEN-LAST:event_InventoryTableMouseClicked

    private void btnUpdateIventoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateIventoryActionPerformed
      // update inventory information
              if(InventoryTable.getSelectionModel().isSelectionEmpty()){
                  errorMsgInventory.setText("Please select an item to update");
                   errorMsgInventory.setVisible(true);
              }
              else{
                  //calling update inventory function
                    update_inventory();
              }
    }//GEN-LAST:event_btnUpdateIventoryActionPerformed

    private void btnDeleteInventoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteInventoryActionPerformed
        //calling function that deletes inventory
        delete_inventory();
    }//GEN-LAST:event_btnDeleteInventoryActionPerformed

    private void btnClearSalesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearSalesActionPerformed
        // function that clears input fields when we cancel input or after we have added a set of inputs
        Functions.ClearSaleEntries(txtItemInfoId, txtItemSalesId, txtItemInfoName, txtItemInfoPrice, txtItemInfoStock,
            txtItemInfoDescription,  txtItemInfoAmount, txtItemSalesQuantity);
        DefaultListModel ItemInfoListModel = new DefaultListModel();
        ItemInfoListModel.removeAllElements();
        ItemInfoList.setModel(ItemInfoListModel);
    }//GEN-LAST:event_btnClearSalesActionPerformed

    private void btnAddSalesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddSalesActionPerformed
                if(txtItemSalesQuantity.getText().length()==0){
           JOptionPane.showMessageDialog(null, "Please enter quantity!");
       }
        else{
            String id = txtItemSalesId.getText();
            String name = txtItemInfoName.getText();
            String quantity = txtItemSalesQuantity.getText();
            String price = txtItemInfoPrice.getText();
            String amount = txtItemInfoAmount.getText();
            String inventoryitem_id = txtItemSalesId.getText();
            String employeeemployee_id =  String.valueOf(EmployeeSalesComboBox.getSelectedItem());
                              
            PreparedStatement prestate;
            String sql = "INSERT INTO `sales` (`item_id`,`name`,`quantity`,`price`,`amount`, `inventoryitem_id`,`employeeemployee_id`)"
            + " VALUES (?,?,?,?,?,?,?)";
            try {
                prestate = Mysql.getConnection().prepareStatement(sql);

                prestate.setString(1, id);
                prestate.setString(2, name);
                prestate.setString(3, quantity);
                prestate.setString(4, price);
                prestate.setString(5, amount);
                prestate.setString(6, inventoryitem_id);
                prestate.setString(7, employeeemployee_id);

                if (prestate.executeUpdate() > 0) {

                    JOptionPane.showMessageDialog(null, "New Sale successfully added!");
                }

            } catch (SQLException except) {
                JOptionPane.showMessageDialog(null, "New Sale could not be added!");

                except.printStackTrace();

            }
            //sapo shtohet nje shitje e re pastron rreshtat e vjeter dhe rishfaq te rinjte se bashku me shitjen e shtuar
            DefaultTableModel SalesTableModel = (DefaultTableModel) SalesTable.getModel();
            SalesTableModel.setRowCount(0);
            show_sales();

            if(txtItemSalesPayment.getText().length()==0){

                String sum =  txtItemInfoAmount.getText();
                double AmountD = Double.parseDouble(sum);
                double TotalAmount = 0;
                TotalAmount += AmountD;
                String TotalAmountS = String.valueOf(TotalAmount);
                txtItemSalesPayment.setText(TotalAmountS);
            }
            else{
                String sum =  txtItemInfoAmount.getText();
                double AmountD = Double.parseDouble(sum);
                double TotalAmount = Double.parseDouble(txtItemSalesPayment.getText());
                TotalAmount += AmountD;
                String TotalAmountS = String.valueOf(TotalAmount);
                txtItemSalesPayment.setText(TotalAmountS);
            }
                 //update quantity after a sale
            int AvailableQuantity = Integer.parseInt(txtItemInfoStock.getText()); 
            int SoldQuantity = Integer.parseInt(txtItemSalesQuantity.getText());
            int RemainedQuantity = AvailableQuantity - SoldQuantity;
           String StringRemainedQuantity = String.valueOf(RemainedQuantity);
            //System.out.println("Remained quantity = " + RemainedQuantity);
            
            try{
             PreparedStatement prestateUpdate;
                   String sqlUpdate ="UPDATE `inventory` SET `quantity`=?"
                        + "WHERE `item_id`=?";
                    prestateUpdate = Mysql.getConnection().prepareStatement(sqlUpdate);

                    
                    prestateUpdate.setString(1, StringRemainedQuantity);
                    prestateUpdate.setString(2, txtItemSalesId.getText());
                    prestateUpdate.execute();
            }
        catch(Exception except){              
                    except.printStackTrace();
                }
                 //as soon as item information is added to inventory old rows are cleared and new ones are shown with updated information
                 DefaultTableModel InventoryTableModel = (DefaultTableModel) InventoryTable.getModel();  
                 InventoryTableModel.setRowCount(0);
                 show_inventory();
           
            
            // function that clears input fields when we cancel input or after we have added a set of inputs
            Functions.ClearSaleEntries(txtItemInfoId, txtItemSalesId, txtItemInfoName, txtItemInfoPrice, txtItemInfoStock,
                txtItemInfoDescription,  txtItemInfoAmount, txtItemSalesQuantity);
            DefaultListModel ItemInfoListModel = new DefaultListModel();
            ItemInfoListModel.removeAllElements();
            ItemInfoList.setModel(ItemInfoListModel);
            
          
       }
    }//GEN-LAST:event_btnAddSalesActionPerformed

    private void ItemSalesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemSalesComboBoxActionPerformed

        PreparedStatement psstatement;
        ResultSet getresults;
        String id = (String)ItemSalesComboBox.getSelectedItem();
        //read item_id from table inventory
        String sqlgetitemsId = "SELECT * FROM `inventory` WHERE `item_id` = ?";

        try{
            psstatement= Mysql.getConnection().prepareStatement(sqlgetitemsId);
            psstatement.setString(1,id);
            getresults = psstatement.executeQuery();

            while(getresults.next()){

                id = getresults.getString("item_id");

                txtItemInfoId.setText(id);
                txtItemSalesId.setText(id);

                DefaultListModel ItemInfoListModel = new DefaultListModel();
                ItemInfoListModel.addElement(id);
                ItemInfoList.setModel(ItemInfoListModel);
                String name = getresults.getString("name");
                txtItemInfoName.setText(name);
                String price = getresults.getString("sprice");
                txtItemInfoPrice.setText(price);
                String quantity = getresults.getString("quantity");
                txtItemInfoStock.setText(quantity);
                String description = getresults.getString("description");
                txtItemInfoDescription.setText(description);

                String amount = "00.00";

                txtItemInfoAmount.setText(amount);
            }
        } catch(Exception except3){
            JOptionPane.showMessageDialog(null, "Error 1122");
            except3.printStackTrace();
        }
        if(ItemSalesComboBox.getSelectedItem()== "Select an Item"){
            Functions.ClearSaleEntries(txtItemInfoId, txtItemSalesId, txtItemInfoName, txtItemInfoPrice, txtItemInfoStock,
                txtItemInfoDescription,  txtItemInfoAmount, txtItemSalesQuantity);

            DefaultListModel ItemInfoListModel = new DefaultListModel();
            ItemInfoListModel.removeAllElements();
            ItemInfoList.setModel(ItemInfoListModel);
        }
    }//GEN-LAST:event_ItemSalesComboBoxActionPerformed

    private void txtItemSalesQuantityKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemSalesQuantityKeyReleased
        // calculate the total amount of the number of units of an item

        if(txtItemSalesQuantity.getText().length()>0 && txtItemInfoPrice.getText().length()>0){
            double quantity = Integer.parseInt(txtItemSalesQuantity.getText());
            double price = Double.parseDouble(txtItemInfoPrice.getText());
            double amount = price*quantity;
            String txtamount = String.valueOf(amount);
            txtItemInfoAmount.setText(txtamount);
        }

    }//GEN-LAST:event_txtItemSalesQuantityKeyReleased

    private void btnGenerateSalesBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateSalesBillActionPerformed
        // set visible check out panel and hide others
        CheckOutPanel.setVisible(true);
        SalesPanel.setVisible(false);
        InventoryPanel.setVisible(false);
        AddItemsPanel.setVisible(false);
        HomepagePanel.setVisible(false);  
        EmployeesPanel.setVisible(false);
       lblShowAmountDue.setText(txtItemSalesPayment.getText());
       lblShowPayable.setText(txtItemSalesPayment.getText());
    }//GEN-LAST:event_btnGenerateSalesBillActionPerformed

    private void txtCashKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCashKeyReleased
        // TODO add your handling code here:  
       double payable = Double.parseDouble(lblShowPayable.getText());    
       double cash = Double.parseDouble(txtCash.getText());      
       double balancelong = cash - payable; 
       double balance = Math.round(balancelong*100.0)/100.0;
       String Sbalance = String.valueOf(balance);
      String Sfbalance = String.format( Sbalance,"%h");
       lblShowBalance.setText(Sfbalance);
    }//GEN-LAST:event_txtCashKeyReleased

    private void btnCancelBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelBillActionPerformed
        // clear input fields
        lblShowAmountDue.setText("");
        txtShowAmount.setText("");
        txtEnterPercent.setText("");
        lblShowBalance.setText("");
        lblShowPayable.setText("");
        txtCash.setText("");
    }//GEN-LAST:event_btnCancelBillActionPerformed

    private void txtEnterPercentKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEnterPercentKeyReleased
        // TODO add your handling code here:

        double payable = Double.parseDouble(lblShowPayable.getText());
        double percentage = Double.parseDouble(txtEnterPercent.getText());
        double discountSubstractionlong = percentage * payable / 100;
         double discountSubstraction = Math.round(discountSubstractionlong*100.0)/100.0;
        String SdiscountSubstraction = String.valueOf(discountSubstraction);
        txtShowAmount.setText(SdiscountSubstraction);
        
        double amountTopay = Double.parseDouble(lblShowAmountDue.getText());
        double finalpaymentlong = amountTopay - discountSubstraction;
        double finalpayment = Math.round(finalpaymentlong*100.0)/100.0;
        String Sfinalpayment = String.valueOf(finalpayment);
        lblShowPayable.setText(Sfinalpayment);
    }//GEN-LAST:event_txtEnterPercentKeyReleased

    private void btnPrintBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintBillActionPerformed
        // TODO add your handling code here:
        String amountDue = lblShowAmountDue.getText();
        
        String discount = txtShowAmount.getText();
        
        String cash = txtCash.getText();
        
        String payable = lblShowPayable.getText();
        
        String balance = lblShowBalance.getText();
        
        
        Bill bill = new Bill();
                                                                       
    DefaultListModel model = new DefaultListModel(); //create a new list model

    bill.setAmount(amountDue);
    bill.setDiscount(discount);
    bill.setCash(cash);
    bill.setPayable(payable);
    bill.setBalance(balance);
    
        model.addElement(bill.StringData()); //add each item to the model
 
    BillList.setModel(model);
    lblShowAmountDue.setText("");
    txtShowAmount.setText("");
    txtCash.setText("");
    lblShowPayable.setText("");
    lblShowBalance.setText("");
    txtEnterPercent.setText("");
    }//GEN-LAST:event_btnPrintBillActionPerformed

    private void btnAddEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddEmployeeActionPerformed
       //calling function that adds employee
        add_employee();
        
    }//GEN-LAST:event_btnAddEmployeeActionPerformed

    private void btnCancelEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelEmployeeActionPerformed
         // function that clears input fields when we cancel input or after we have added a set of inputs 
Functions.ClearItems(errorMsgEmployee,txtEmployeeId, txtEmployeeName, txtEmployeeLastName,
              txtEmployeeEmail, txtEmployeePhone, txtEmployeeAddress, txtEmployeePosition, 
              txtEmployeeSalary);
    }//GEN-LAST:event_btnCancelEmployeeActionPerformed

    private void btnUpdateEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateEmployeeActionPerformed
           // update employee information
              if(EmployeeTable.getSelectionModel().isSelectionEmpty()){
                  errorMsgEmployee.setText("Please select an item to update");
                   errorMsgEmployee.setVisible(true);
              }
              else{
                  //calling update employee function
                  update_employee();
              }  
    }//GEN-LAST:event_btnUpdateEmployeeActionPerformed

    private void btnDeleteEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteEmployeeActionPerformed
        // calling function delete employee       
        delete_employee();
    }//GEN-LAST:event_btnDeleteEmployeeActionPerformed

    private void EmployeeTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EmployeeTableMouseClicked
        // enter selected employee information to respective textfields
               DefaultTableModel EmployeeTableModel = (DefaultTableModel) EmployeeTable.getModel();

               String id = EmployeeTableModel.getValueAt(EmployeeTable.getSelectedRow(), 0).toString();
               String name = EmployeeTableModel.getValueAt(EmployeeTable.getSelectedRow(), 1).toString();
               String lastname = EmployeeTableModel.getValueAt(EmployeeTable.getSelectedRow(), 2).toString();
               String email = EmployeeTableModel.getValueAt(EmployeeTable.getSelectedRow(), 3).toString();
               String phone = EmployeeTableModel.getValueAt(EmployeeTable.getSelectedRow(), 4).toString();
               String address = EmployeeTableModel.getValueAt(EmployeeTable.getSelectedRow(), 5).toString();
               String position = EmployeeTableModel.getValueAt(EmployeeTable.getSelectedRow(), 6).toString();
               String salary = EmployeeTableModel.getValueAt(EmployeeTable.getSelectedRow(), 7).toString();

               txtEmployeeId.setText(id);
               txtEmployeeName.setText(name);
               txtEmployeeLastName.setText(lastname);
               txtEmployeeEmail.setText(email);
               txtEmployeePhone.setText(phone);
               txtEmployeeAddress.setText(address);
               txtEmployeePosition.setText(position);
               txtEmployeeSalary.setText(salary);
    }//GEN-LAST:event_EmployeeTableMouseClicked

    private void managehomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managehomeActionPerformed
        // set visible homepage panel and hide others
        HomepagePanel.setVisible(true);
        AddItemsPanel.setVisible(false);
        InventoryPanel.setVisible(false);
        SalesPanel.setVisible(false);
        CheckOutPanel.setVisible(false);
        EmployeesPanel.setVisible(false);
    }//GEN-LAST:event_managehomeActionPerformed

    private void manageItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageItemsActionPerformed
         // set visible items panel and hide others
        AddItemsPanel.setVisible(true);
        HomepagePanel.setVisible(false);
        InventoryPanel.setVisible(false);
        SalesPanel.setVisible(false);
        CheckOutPanel.setVisible(false);
        EmployeesPanel.setVisible(false);
    }//GEN-LAST:event_manageItemsActionPerformed

    private void manageInventoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageInventoryActionPerformed
              // set visible inventory panel and hide others
        InventoryPanel.setVisible(true);
        AddItemsPanel.setVisible(false);
        HomepagePanel.setVisible(false);
        SalesPanel.setVisible(false);
        CheckOutPanel.setVisible(false);
        EmployeesPanel.setVisible(false);
    }//GEN-LAST:event_manageInventoryActionPerformed

    private void manageSalesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageSalesActionPerformed
        // set visible sales panel and hide others
        SalesPanel.setVisible(true);
        InventoryPanel.setVisible(false);
        AddItemsPanel.setVisible(false);
        HomepagePanel.setVisible(false);  
        CheckOutPanel.setVisible(false);
        EmployeesPanel.setVisible(false);
    }//GEN-LAST:event_manageSalesActionPerformed

    private void manageCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageCheckoutActionPerformed
       // set visible check out panel and hide others
        CheckOutPanel.setVisible(true);
        SalesPanel.setVisible(false);
        InventoryPanel.setVisible(false);
        AddItemsPanel.setVisible(false);
        HomepagePanel.setVisible(false);  
        EmployeesPanel.setVisible(false);
    }//GEN-LAST:event_manageCheckoutActionPerformed

    private void manageEmployeesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageEmployeesActionPerformed
        // set visible check out panel and hide others
        EmployeesPanel.setVisible(true);
        CheckOutPanel.setVisible(false);
        SalesPanel.setVisible(false);
        InventoryPanel.setVisible(false);
        AddItemsPanel.setVisible(false);
        HomepagePanel.setVisible(false);  
        
    }//GEN-LAST:event_manageEmployeesActionPerformed

    
  //=========================Items Module functions============================= 
    //function that adds items to the database
         public void save_items(){ 
        
        Items item = new Items();
        
        String id = txtItemsId.getText();
         item.setItem_id(id);
        String name = txtItemsName.getText();
         item.setItem_name(name);
        String description = txtItemsDescription.getText();
         item.setDescription(description);
        String received_date = txtItemsRdate.getText();
         item.setReceived_date(received_date);
        String brand = txtItemsBrand.getText();
         item.setBrand(brand);
        String bprice = txtItemsBprice.getText();
         item.setBuying_price(bprice);
        String sprice = txtItemsSprice.getText();
         item.setSelling_price(sprice);
        String quantity = txtItemsQuantity.getText();
         item.setQuantity(quantity);
       
        
      // add item if all input fields are not empty
    
     if(id.length()<=0 || name.length()<=0 || description.length()<=0 || received_date.length()<=0 
             || brand.length()<=0 || bprice.length()<=0 || sprice.length()<=0 || quantity.length()<=0){
     
     errorMsgItems.setVisible(true);
     errorMsgItems.setText("All field inputs are required");
     }
     else{
     //set visible false to error message
     errorMsgItems.setVisible(false);

        PreparedStatement prestate;

        String sql = "INSERT INTO `items` (`item_id`,`name`,`description`,`received_date`,`brand`,`bprice`,`sprice`,`quantity`)"
                + " VALUES (?,?,?,?,?,?,?,?)";

        try {
            prestate = Mysql.getConnection().prepareStatement(sql);

            prestate.setString(1, id);
            prestate.setString(2, name);
            prestate.setString(3, description);
            prestate.setString(4, received_date);
            prestate.setString(5, brand);
            prestate.setString(6, bprice);
            prestate.setString(7, sprice);
            prestate.setString(8, quantity);

            if (prestate.executeUpdate() > 0) {

                JOptionPane.showMessageDialog(null, "New Item successfully added!");
            }

        } catch (SQLException except) {
            JOptionPane.showMessageDialog(null, "New Item could not be added!");

        }
        //sapo shtohet nje item i ri pastron rreshtat e vjeter dhe rishfaq te rinjte se bashku me item e shtuar
   DefaultTableModel ItemsTableModel = (DefaultTableModel) ItemsTable.getModel();  
   ItemsTableModel.setRowCount(0);
   show_items();
 
       // function that clears input fields when we cancel input or after we have added a set of inputs 
Functions.ClearItems(errorMsgItems,txtItemsId, txtItemsName, txtItemsDescription,
              txtItemsRdate, txtItemsBrand, txtItemsBprice, txtItemsSprice, txtItemsQuantity);
     }
    }   
         
    //function that  updates items
        public void update_items(){
    // update items information
              if(ItemsTable.getSelectionModel().isSelectionEmpty()){
                  errorMsgItems.setText("Please select an item to update");
                  errorMsgItems.setVisible(true);
              }
              else{
                  try{
             PreparedStatement prestate;
                   String sql ="UPDATE `items` SET  `name`=?,`description`=?,`received_date`=?,`brand`=?,`bprice`=?,`sprice`=?,`quantity`=?"
                        + "WHERE `item_id`=?";
                    prestate = Mysql.getConnection().prepareStatement(sql);


                    prestate.setString(1, txtItemsName.getText());
                    prestate.setString(2, txtItemsDescription.getText());
                    prestate.setString(3, txtItemsRdate.getText());
                    prestate.setString(4, txtItemsBrand.getText());
                    prestate.setString(5, txtItemsBprice.getText());
                    prestate.setString(6, txtItemsSprice.getText());
                    prestate.setString(7, txtItemsQuantity.getText());
                    prestate.setString(8, txtItemsId.getText());

                    if (prestate.executeUpdate() > 0) {

                        JOptionPane.showMessageDialog(null, "Item Information successfully updated");
                    }

                }

                catch(Exception except){
                JOptionPane.showMessageDialog(null, "Item information could not be updated! ");
                except.printStackTrace();
                }
                 //as soon as item information is updated old rows are cleared and new ones are shown with updated information
                 DefaultTableModel ItemsTableModel = (DefaultTableModel) ItemsTable.getModel();  
                 ItemsTableModel.setRowCount(0);
                 show_items();
                // function that clears input fields when we cancel input or after we have added a set of inputs 
               Functions.ClearItems(errorMsgItems,txtItemsId, txtItemsName, txtItemsDescription,
                             txtItemsRdate, txtItemsBrand, txtItemsBprice, txtItemsSprice, txtItemsQuantity);
              }
    }
        
    //function that deletes items
        public void delete_items(){
      //delete items
               if(ItemsTable.getSelectionModel().isSelectionEmpty()){
                errorMsgItems.setText("Please select an item to delete");
                 errorMsgItems.setVisible(true);
            }
            else{
              try{
           PreparedStatement prestate;
                 String sql ="DELETE FROM `items` WHERE `item_id`=?";
                  prestate = Mysql.getConnection().prepareStatement(sql);
                  prestate.setString(1, txtItemsId.getText());

                  if (prestate.executeUpdate() > 0) {

                      JOptionPane.showMessageDialog(null, "Item Deleted Successfully!");
                  }

              }
              catch(Exception except){
              JOptionPane.showMessageDialog(null, "Item could not Deleted !");
              }
                 //sapo fshihet nje item pastron rreshtat e vjeter dhe rishfaq te rinjte pa item e hequr
         DefaultTableModel ItemsTableModel = (DefaultTableModel) ItemsTable.getModel();  
         ItemsTableModel.setRowCount(0);
         show_items();
               // function that clears input fields when we cancel input or after we have added a set of inputs 
             Functions.ClearItems(errorMsgItems, txtItemsId, txtItemsName, txtItemsDescription,
                           txtItemsRdate, txtItemsBrand, txtItemsBprice, txtItemsSprice, txtItemsQuantity);
               }
    }  
        
    //function that reads items from database
        public ArrayList<Items> ItemList() {
            
            ArrayList<Items> ItemsList = new ArrayList<>();
            
            try{               
           Statement states = Mysql.getConnection().createStatement();
            String sqlquery = "SELECT * FROM `items`";
            ResultSet getresults = states.executeQuery(sqlquery);
           Items items;
            while (getresults.next()) {
          items=new Items(getresults.getString("Item_id"),getresults.getString("name"),
                  getresults.getString("description"),getresults.getString("received_date"),getresults.getString("brand"),
                  getresults.getString("bprice"),getresults.getString("sprice"),getresults.getString("quantity"));
        
      
            ItemsList.add(items);
            }   
          }
            
            catch(Exception e){
           JOptionPane.showMessageDialog(null, "Error read table data on line 588!");
           e.printStackTrace();
            }
            return ItemsList;
        } 
        
    //function that shows items from database
        public  void show_items(){
      ArrayList<Items> list = ItemList();
      DefaultTableModel ClientTableModel =(DefaultTableModel) ItemsTable.getModel();
      Object [] row = new Object[8];
      for(int i=0;i<list.size(); i++){
      row[0]=list.get(i).getItem_id();
      row[1]=list.get(i).getItem_name();
      row[2]=list.get(i).getDescription();
      row[3]=list.get(i).getReceived_date();
      row[4]=list.get(i).getBrand();
      row[5]=list.get(i).getBuying_price();
      row[6]=list.get(i).getSelling_price();
      row[7]=list.get(i).getQuantity();
      ClientTableModel.addRow(row);
      }
      
      } 
        
    //function that adds new items to inventory for the first time
        public void add_items_to_inventory_if_not_exists(){
     Items item = new Items();
        
        String idcheck = txtItemsId.getText();
         item.setItem_id(idcheck);
        String name = txtItemsName.getText();
         item.setItem_name(name);
        String description = txtItemsDescription.getText();
         item.setDescription(description);
        String update_date = txtItemsRdate.getText();
         item.setReceived_date(update_date);
        String brand = txtItemsBrand.getText();
         item.setBrand(brand);
        String bprice = txtItemsBprice.getText();
         item.setBuying_price(bprice);
        String sprice = txtItemsSprice.getText();
         item.setSelling_price(sprice);
        String quantity = txtItemsQuantity.getText();
         item.setQuantity(quantity);
       
        
      // add item if all input fields are not empty
    
     if(idcheck.length()<=0 || name.length()<=0 || description.length()<=0 || update_date.length()<=0 
             || brand.length()<=0 || bprice.length()<=0 || sprice.length()<=0 || quantity.length()<=0){
     
     errorMsgItems.setVisible(true);
     errorMsgItems.setText("All field inputs are required");
     }
     else{
     //set visible false to error message
     errorMsgItems.setVisible(false);

        PreparedStatement prestate;

        String sql = "INSERT INTO `inventory` (`item_id`,`name`,`description`,`update_date`,`brand`,`bprice`,`sprice`,`quantity`,`itemsitem_id`)"
                + " VALUES (?,?,?,?,?,?,?,?,?)";

        try {
            prestate = Mysql.getConnection().prepareStatement(sql);

            prestate.setString(1, idcheck);
            prestate.setString(2, name);
            prestate.setString(3, description);
            prestate.setString(4, update_date);
            prestate.setString(5, brand);
            prestate.setString(6, bprice);
            prestate.setString(7, sprice);
            prestate.setString(8, quantity);
            prestate.setString(9, idcheck);

            if (prestate.executeUpdate() > 0) {

                JOptionPane.showMessageDialog(null, "New Item successfully added to inventory for the first time!");
            }

        } catch (SQLException except) {
            JOptionPane.showMessageDialog(null, "New Item could not be added to inventory for the first time!");

        }
        //sapo shtohet nje item i ri pastron rreshtat e vjeter dhe rishfaq te rinjte se bashku me item e shtuar
   DefaultTableModel InventoryTableModel = (DefaultTableModel) InventoryTable.getModel();  
   InventoryTableModel.setRowCount(0);
   show_inventory();
 
       // function that clears input fields when we cancel input or after we have added a set of inputs 
Functions.ClearItems(errorMsgItems,txtItemsId, txtItemsName, txtItemsDescription,
              txtItemsRdate, txtItemsBrand, txtItemsBprice, txtItemsSprice, txtItemsQuantity);
     }
    
    }
        
    // function that updates inventory from items panel
        public void update_inventory_from_items(){
    
      try{
             PreparedStatement prestate;
                   String sql ="UPDATE `inventory` SET  `name`=?,`description`=?,`update_date`=?,`brand`=?,`bprice`=?,`sprice`=?,`quantity`=?,`itemsitem_id`=?"
                        + "WHERE `item_id`=?";
                    prestate = Mysql.getConnection().prepareStatement(sql);


                    prestate.setString(1, txtItemsName.getText());
                    prestate.setString(2, txtItemsDescription.getText());
                    prestate.setString(3, txtItemsRdate.getText());
                    prestate.setString(4, txtItemsBrand.getText());
                    prestate.setString(5, txtItemsBprice.getText());
                    prestate.setString(6, txtItemsSprice.getText());
                    prestate.setString(7, txtItemsQuantity.getText());
                    prestate.setString(8, txtItemsId.getText());
                    prestate.setString(9, txtItemsId.getText());

                    if (prestate.executeUpdate() > 0) {

                        JOptionPane.showMessageDialog(null, "Item successfully added to inventory!");
                    }

                }

                catch(Exception except){
                JOptionPane.showMessageDialog(null, "Item could not be added to inventory!");
                except.printStackTrace();
                }
                 //as soon as item information is added to inventory old rows are cleared and new ones are shown with updated information
                 DefaultTableModel InventoryTableModel = (DefaultTableModel) InventoryTable.getModel();  
                 InventoryTableModel.setRowCount(0);
                 show_inventory();
                // function that clears input fields when we cancel input or after we have added a set of inputs 
               Functions.ClearItems(errorMsgItems,txtItemsId, txtItemsName, txtItemsDescription,
                             txtItemsRdate, txtItemsBrand, txtItemsBprice, txtItemsSprice, txtItemsQuantity);
    }
        
  //========================Inventory Module functions==========================  
    //function that add items to inventory table
        public void save_inventory(){
        Inventory inventory = new Inventory();
        
        String id = txtInventoryItemId.getText();
         inventory.setItem_id(id);
        String name = txtInventoryName.getText();
         inventory.setItem_name(name);
        String description = txtInventoryDescription.getText();
         inventory.setDescription(description);
        String update_date = txtInventoryUpdateAt.getText();
         inventory.setUpdateDate(update_date);
        String brand = txtInventoryBrand.getText();
         inventory.setBrand(brand);
        String bprice = txtInventoryBprice.getText();
         inventory.setBuying_price(bprice);
        String sprice = txtInventorySprice.getText();
         inventory.setSelling_Price(sprice);
        String quantity = txtInventoryQuantity.getText();
         inventory.setQuantity(quantity);
       
        
      // add item if all input fields are not empty
    
     if(id.length()<=0 || name.length()<=0 || description.length()<=0 || update_date.length()<=0 
             || brand.length()<=0 || bprice.length()<=0 || sprice.length()<=0 || quantity.length()<=0){
     
     errorMsgInventory.setVisible(true);
     errorMsgInventory.setText("All field inputs are required");
     }
     else{
     //set visible false to error message
     errorMsgInventory.setVisible(false);

        PreparedStatement prestate;

        String sql = "INSERT INTO `inventory` (`item_id`,`name`,`description`,`update_date`,`brand`,`bprice`,`sprice`,`quantity`,`itemsitem_id`)"
                + " VALUES (?,?,?,?,?,?,?,?,?)";

        try {
            prestate = Mysql.getConnection().prepareStatement(sql);

            prestate.setString(1, id);
            prestate.setString(2, name);
            prestate.setString(3, description);
            prestate.setString(4, update_date);
            prestate.setString(5, brand);
            prestate.setString(6, bprice);
            prestate.setString(7, sprice);
            prestate.setString(8, quantity);
            prestate.setString(9, id);

            if (prestate.executeUpdate() > 0) {

                JOptionPane.showMessageDialog(null, "New Item successfully added!");
            }

        } catch (SQLException except) {
            JOptionPane.showMessageDialog(null, "New Item could not be added!");
            
            except.printStackTrace();

        }
        //sapo shtohet nje item i ri pastron rreshtat e vjeter dhe rishfaq te rinjte se bashku me item e shtuar
   DefaultTableModel InventoryTableModel = (DefaultTableModel) InventoryTable.getModel();  
   InventoryTableModel.setRowCount(0);
   show_inventory();
 
       // function that clears input fields when we cancel input or after we have added a set of inputs 
Functions.ClearItems(errorMsgInventory,txtInventoryItemId, txtInventoryName, txtInventoryDescription,
              txtInventoryUpdateAt, txtInventoryBrand, txtInventoryBprice, txtInventorySprice, txtInventoryQuantity);
     }
    }
        
    //function that updates inventory
        public void update_inventory(){
    
    try{
             PreparedStatement prestate;
                   String sql ="UPDATE `inventory` SET  `name`=?,`description`=?,`update_date`=?,`brand`=?,`bprice`=?,`sprice`=?,`quantity`=?"
                        + "WHERE `item_id`=?";
                    prestate = Mysql.getConnection().prepareStatement(sql);


                    prestate.setString(1, txtInventoryName.getText());
                    prestate.setString(2, txtInventoryDescription.getText());
                    prestate.setString(3, txtInventoryUpdateAt.getText());
                    prestate.setString(4, txtInventoryBrand.getText());
                    prestate.setString(5, txtInventoryBprice.getText());
                    prestate.setString(6, txtInventorySprice.getText());
                    prestate.setString(7, txtInventoryQuantity.getText());
                    prestate.setString(8, txtInventoryItemId.getText());

                    if (prestate.executeUpdate() > 0) {

                        JOptionPane.showMessageDialog(null, "Inventory successfully updated!");
                    }

                }

                catch(Exception except){
                JOptionPane.showMessageDialog(null, "Inventory could not be updated!");
                except.printStackTrace();
                }
                 //as soon as item information is added to inventory old rows are cleared and new ones are shown with updated information
                 DefaultTableModel InventoryTableModel = (DefaultTableModel) InventoryTable.getModel();  
                 InventoryTableModel.setRowCount(0);
                 show_inventory();
                // function that clears input fields when we cancel input or after we have added a set of inputs 
               Functions.ClearItems(errorMsgItems,txtItemsId, txtItemsName, txtItemsDescription,
                             txtItemsRdate, txtItemsBrand, txtItemsBprice, txtItemsSprice, txtItemsQuantity);
    }
        
    //function that deletes inventory
        public void delete_inventory(){ 
        if(InventoryTable.getSelectionModel().isSelectionEmpty()){
                    errorMsgInventory.setText("Please select an item to delete");
                     errorMsgInventory.setVisible(true);
                }
                else{
                  try{
               PreparedStatement prestate;
                     String sql ="DELETE FROM `inventory` WHERE `item_id`=?";
                      prestate = Mysql.getConnection().prepareStatement(sql);
                      prestate.setString(1, txtInventoryItemId.getText());

                      if (prestate.executeUpdate() > 0) {

                          JOptionPane.showMessageDialog(null, "Inventory Deleted Successfully!");
                      }

                  }
                  catch(Exception except){
                  JOptionPane.showMessageDialog(null, "Inventory could not Deleted !");
                  }
                     //sapo fshihet nje item pastron rreshtat e vjeter dhe rishfaq te rinjte pa item e hequr
             DefaultTableModel InventoryTableModel = (DefaultTableModel) InventoryTable.getModel();  
             InventoryTableModel.setRowCount(0);
             show_inventory();
                  // function that clears input fields when we cancel input or after we have added a set of inputs 
    Functions.ClearItems(errorMsgInventory,txtInventoryItemId, txtInventoryName, txtInventoryDescription,
                  txtInventoryUpdateAt, txtInventoryBrand, txtInventoryBprice, txtInventorySprice, txtInventoryQuantity);
                   }
    } 
        
    //function that reads inventory from database
        public ArrayList<Inventory> InventoryList() {
            
            ArrayList<Inventory> InventorysList = new ArrayList<>();
            
            try{               
           Statement states = Mysql.getConnection().createStatement();
            String sqlquery = "SELECT * FROM `inventory`";
            ResultSet getresults = states.executeQuery(sqlquery);
          Inventory inventory;
            while (getresults.next()) {
          inventory=new Inventory(getresults.getString("Item_id"),getresults.getString("name"),
                  getresults.getString("description"),getresults.getString("update_date"),getresults.getString("brand"),
                  getresults.getString("bprice"),getresults.getString("sprice"),getresults.getString("quantity"));
        
      
            InventorysList.add(inventory);
            }   
          }
            
            catch(Exception e){
           JOptionPane.showMessageDialog(null, "Error read table data on line 1073!");
           e.printStackTrace();
            }
            return InventorysList;
        } 
      
    //function that shows items from database
        public  void show_inventory(){
      ArrayList<Inventory> list = InventoryList();
      DefaultTableModel InventoryTableModel =(DefaultTableModel) InventoryTable.getModel();
      Object [] row = new Object[8];
      for(int i=0;i<list.size(); i++){
      row[0]=list.get(i).getItem_id();
      row[1]=list.get(i).getItem_name();
      row[2]=list.get(i).getDescription();
      row[3]=list.get(i).getUpdateDate();
      row[4]=list.get(i).getBrand();
      row[5]=list.get(i).getBuying_price();
      row[6]=list.get(i).getSelling_Price();
      row[7]=list.get(i).getQuantity();
      InventoryTableModel.addRow(row);
      }
      
      } 
        
        
  //==========================Sales Module functions============================    
    
    // show items on combobox function
        public void show_combobox_items(){     
           PreparedStatement psstatement;
           ResultSet getresults;
           
           //read item_id from table inventory
           String sqlgetitemsId = "SELECT `item_id` FROM `inventory`";
           
            try{  
           psstatement= Mysql.getConnection().prepareStatement(sqlgetitemsId); 
           
           getresults = psstatement.executeQuery();
         
while(getresults.next()){
DefaultComboBoxModel ItemSalesComboBoxModel = (DefaultComboBoxModel) ItemSalesComboBox.getModel();

            String id = getresults.getString("Item_id");
             ItemSalesComboBoxModel.addElement(id);
}

        } catch(Exception except3){
                JOptionPane.showMessageDialog(null, "Error 1602");
                except3.printStackTrace();
                }
       }
        
    // show employees on combobox function
        public void show_combobox_employees(){     
           PreparedStatement psstatement;
           ResultSet getresults;
           
           //read item_id from table inventory
           String sqlgetitemsId = "SELECT `employee_id` FROM `employee`";
           
            try{  
           psstatement= Mysql.getConnection().prepareStatement(sqlgetitemsId); 
           
           getresults = psstatement.executeQuery();
         
while(getresults.next()){
DefaultComboBoxModel EmployeeSalesComboBoxModel = (DefaultComboBoxModel) EmployeeSalesComboBox.getModel();

            String id = getresults.getString("employee_id");
             EmployeeSalesComboBoxModel.addElement(id);
}

        } catch(Exception except3){
                JOptionPane.showMessageDialog(null, "Error 1602");
                except3.printStackTrace();
                }
       }
        
    //function that reads sales from database
        public ArrayList<Sales> SaleList() {
            
            ArrayList<Sales> SalesList = new ArrayList<>();
            
            try{               
           Statement states = Mysql.getConnection().createStatement();
            String sqlquery = "SELECT * FROM `sales`";
            ResultSet getresults = states.executeQuery(sqlquery);
          Sales sales;
            while (getresults.next()) {
          sales=new Sales(getresults.getString("sale_id"),getresults.getString("item_id"),
                  getresults.getString("name"),getresults.getString("quantity"),getresults.getString("price"),
                  getresults.getString("amount"));
        
      
            SalesList.add(sales);
            }   
          }
            
            catch(Exception e){
           JOptionPane.showMessageDialog(null, "Error read table data on line 1073!");
           e.printStackTrace();
            }
            return SalesList;
        } 
      
    //function that shows sales from database
        public  void show_sales(){
      ArrayList<Sales> list = SaleList();
      DefaultTableModel SalesTableModel =(DefaultTableModel) SalesTable.getModel();
      Object [] row = new Object[6];
      for(int i=0;i<list.size(); i++){
      row[0]=list.get(i).getSale_id();
      row[1]=list.get(i).getItem_id();
      row[2]=list.get(i).getItem_name();
      row[3]=list.get(i).getQuantity();
      row[4]=list.get(i).getSelling_price();
      row[5]=list.get(i).getS_amount();

      SalesTableModel.addRow(row);
      }
      
      } 
        
  //========================Employee Module functions===========================
        
    //function that adds employees
        public void add_employee(){
            Employee employee = new Employee();

            String id = txtEmployeeId.getText();
                employee.setEmp_id(id);
            String name = txtEmployeeName.getText();
                employee.setEname(name);
            String lastname = txtEmployeeLastName.getText();
                employee.setElastname(lastname);  
            String email = txtEmployeeEmail.getText();
                employee.setEmail(email);
            String phone = txtEmployeePhone.getText();
                employee.setPhone(phone);
            String address = txtEmployeeAddress.getText();
                employee.setAddress(address);
            String position = txtEmployeePosition.getText();
                employee.setPosition(position);
            String salary = txtEmployeeSalary.getText();
                employee.setSalary(salary);

          // add employee if all input fields are not empty

         if(id.length()<=0 || name.length()<=0 || lastname.length()<=0 || email.length()<=0   
                 || phone.length()<=0 || address.length()<=0 || position.length()<=0
                 || salary.length()<=0){

                errorMsgEmployee.setVisible(true);
                errorMsgEmployee.setText("All field inputs are required!");
         }
         else{
            //set visible false to error message
            errorMsgEmployee.setVisible(false);

               PreparedStatement prestate;

            String sql = "INSERT INTO `employee` (`employee_id`,`ename`,`elname`,`email`,`phone`,`address`,`position`,`salary`)"
                    + " VALUES (?,?,?,?,?,?,?,?)";

            try {
                prestate = Mysql.getConnection().prepareStatement(sql);

                prestate.setString(1, id);
                prestate.setString(2, name);
                prestate.setString(3, lastname);
                prestate.setString(4, email);
                prestate.setString(5, phone);
                prestate.setString(6, address);
                prestate.setString(7, position);
                prestate.setString(8, salary);

                if (prestate.executeUpdate() > 0) {

                    JOptionPane.showMessageDialog(null, "New Employee successfully added!");
                }

            } catch (SQLException except) {
              JOptionPane.showMessageDialog(null, "New Employee could not be added!");
            }
            //sapo shtohet nje punonjes i ri pastron rreshtat e vjeter dhe rishfaq te rinjte se bashku me punonjesin e shtuar
       DefaultTableModel EmployeeTableModel = (DefaultTableModel) EmployeeTable.getModel();  
       EmployeeTableModel.setRowCount(0);
        show_employees();

               // function that clears input fields when we cancel input or after we have added a set of inputs 
    Functions.ClearItems(errorMsgEmployee,txtEmployeeId, txtEmployeeName, txtEmployeeLastName,
                  txtEmployeeEmail, txtEmployeePhone, txtEmployeeAddress, txtEmployeePosition, 
                  txtEmployeeSalary);
     }
   }
        
    //function that updates employees
        public void update_employee(){       
         try{
             PreparedStatement prestate;
                   String sql ="UPDATE `employee` SET  `ename`=?,`elname`=?,`email`=?,`phone`=?,`address`=?,`position`=?,`salary`=?"
                        + "WHERE `employee_id`=?";
                    prestate = Mysql.getConnection().prepareStatement(sql);
                   
                    prestate.setString(1, txtEmployeeName.getText());
                    prestate.setString(2, txtEmployeeLastName.getText());
                    prestate.setString(3, txtEmployeeEmail.getText());
                    prestate.setString(4, txtEmployeePhone.getText());
                    prestate.setString(5, txtEmployeeAddress.getText());
                    prestate.setString(6, txtEmployeePosition.getText());
                    prestate.setString(7, txtEmployeeSalary.getText());
                    prestate.setString(8, txtEmployeeId.getText());

                    if (prestate.executeUpdate() > 0) {

                        JOptionPane.showMessageDialog(null, "Employee data successfully updated!");
                    }

                }

                catch(Exception except){
                JOptionPane.showMessageDialog(null, "Employee data could not be updated!");
                except.printStackTrace();
                }
                 //as soon as item information is added to inventory old rows are cleared and new ones are shown with updated information
                 DefaultTableModel EmployeeTableModel = (DefaultTableModel) EmployeeTable.getModel();  
                 EmployeeTableModel.setRowCount(0);
                 show_employees();
              // function that clears input fields when we cancel input or after we have added a set of inputs 
    Functions.ClearItems(errorMsgEmployee,txtEmployeeId, txtEmployeeName, txtEmployeeLastName,
                  txtEmployeeEmail, txtEmployeePhone, txtEmployeeAddress, txtEmployeePosition, 
                  txtEmployeeSalary);
        
        }
        
    //function that deletes employee
        public void delete_employee(){
            if(EmployeeTable.getSelectionModel().isSelectionEmpty()){
                        errorMsgEmployee.setText("Please select an employee to delete");
                         errorMsgEmployee.setVisible(true);
                    }
                    else{
                      try{
                   PreparedStatement prestate;
                         String sql ="DELETE FROM `employee` WHERE `employee_id`=?";
                          prestate = Mysql.getConnection().prepareStatement(sql);
                          prestate.setString(1, txtEmployeeId.getText());

                          if (prestate.executeUpdate() > 0) {

                              JOptionPane.showMessageDialog(null, "Employee Data Deleted Successfully!");
                          }

                      }
                      catch(Exception except){
                      JOptionPane.showMessageDialog(null, "Employee Data could not Deleted !");
                      }
                         //sapo fshihet nje employee pastron rreshtat e vjeter dhe rishfaq te rinjte pa employee e hequr
                 DefaultTableModel EmployeeTableModel = (DefaultTableModel)  EmployeeTable.getModel();  
                 EmployeeTableModel.setRowCount(0);
                 show_employees();
            Functions.ClearItems(errorMsgEmployee,txtEmployeeId, txtEmployeeName, txtEmployeeLastName,
                  txtEmployeeEmail, txtEmployeePhone, txtEmployeeAddress, txtEmployeePosition, 
                  txtEmployeeSalary);
            }
        }
    
    //function that reads items from database
         public ArrayList<Employee> EmployeeList() {
            
            ArrayList<Employee> EmployeesList = new ArrayList<>();
            
            try{               
           Statement states = Mysql.getConnection().createStatement();
            String sqlquery = "SELECT * FROM `employee`";
            ResultSet getresults = states.executeQuery(sqlquery);
           Employee employee;
            while (getresults.next()) {
          employee=new Employee(getresults.getString("employee_id"),getresults.getString("ename"),
                  getresults.getString("elname"),getresults.getString("email"),getresults.getString("phone"),
                  getresults.getString("address"),getresults.getString("position"),getresults.getString("salary"));
        
      
            EmployeesList.add(employee);
            }   
          }
            
            catch(Exception e){
           JOptionPane.showMessageDialog(null, "Error read table data on line 2527!");
           e.printStackTrace();
            }
            return EmployeesList;
        } 
        
    //function that shows employees from database
        public  void show_employees(){
      ArrayList<Employee> list = EmployeeList();
      DefaultTableModel EmployeeTableModel =(DefaultTableModel) EmployeeTable.getModel();
      Object [] row = new Object[8];
      for(int i=0;i<list.size(); i++){
      row[0]=list.get(i).getEmp_id();
      row[1]=list.get(i).getEname();
      row[2]=list.get(i).getElastname();
      row[3]=list.get(i).getEmail();
      row[4]=list.get(i).getPhone();
      row[5]=list.get(i).getAddress();
      row[6]=list.get(i).getPosition();
      row[7]=list.get(i).getSalary();
      EmployeeTableModel.addRow(row);
      }
      
      } 
      
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RetailMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RetailMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RetailMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RetailMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RetailMainFrame().setVisible(false);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AddItemsPanel;
    private javax.swing.JPanel BillInfoPanel;
    private javax.swing.JList<String> BillList;
    private javax.swing.JScrollPane BilllPane;
    private javax.swing.JPanel CheckOutPanel;
    private javax.swing.JScrollPane EmployeePane;
    private javax.swing.JComboBox<String> EmployeeSalesComboBox;
    private javax.swing.JTable EmployeeTable;
    private javax.swing.JPanel EmployeesPanel;
    private javax.swing.JPanel HomepagePanel;
    private javax.swing.JPanel InventoryPanel;
    private javax.swing.JTable InventoryTable;
    private javax.swing.JList<String> ItemInfoList;
    private javax.swing.JScrollPane ItemInfolPane;
    private javax.swing.JPanel ItemInformationPanel;
    private javax.swing.JComboBox<String> ItemSalesComboBox;
    private javax.swing.JPanel ItemSalesPanel;
    private javax.swing.JTable ItemsTable;
    private javax.swing.JMenu Menu1;
    private javax.swing.JMenu Menu2;
    private javax.swing.JMenu Menu3;
    private javax.swing.JMenu Menu4;
    private javax.swing.JMenu Menu5;
    private javax.swing.JMenu Menu6;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JPanel SalesPanel;
    private javax.swing.JTable SalesTable;
    private javax.swing.JScrollPane SalesTablelPane;
    private javax.swing.JButton btnAddEmployee;
    private javax.swing.JButton btnAddInventory;
    private javax.swing.JButton btnAddSales;
    private javax.swing.JButton btnCancelBill;
    private javax.swing.JButton btnCancelEmployee;
    private javax.swing.JButton btnClearInventory;
    private javax.swing.JButton btnClearItems;
    private javax.swing.JButton btnClearSales;
    private javax.swing.JButton btnDeleteEmployee;
    private javax.swing.JButton btnDeleteInventory;
    private javax.swing.JButton btnDeleteItems;
    private javax.swing.JButton btnGenerateSalesBill;
    private javax.swing.JButton btnPrintBill;
    private javax.swing.JButton btnSaveInventory;
    private javax.swing.JButton btnSaveItems;
    private javax.swing.JButton btnUpdateEmployee;
    private javax.swing.JButton btnUpdateItems;
    private javax.swing.JButton btnUpdateIventory;
    private javax.swing.JLabel errorMsgEmployee;
    private javax.swing.JLabel errorMsgInventory;
    private javax.swing.JLabel errorMsgItems;
    private javax.swing.JLabel errorMsgSales;
    private javax.swing.JScrollPane jScrollPaneInventory;
    private javax.swing.JScrollPane jScrollPaneItems;
    private javax.swing.JLabel lblAddItems;
    private javax.swing.JLabel lblAmount;
    private javax.swing.JLabel lblAmountDue;
    private javax.swing.JLabel lblBalance;
    private javax.swing.JLabel lblCash;
    private javax.swing.JLabel lblCheckOut;
    private javax.swing.JLabel lblDiscount;
    private javax.swing.JLabel lblEmployee;
    private javax.swing.JLabel lblEmployeeAddress;
    private javax.swing.JLabel lblEmployeeEmail;
    private javax.swing.JLabel lblEmployeeId;
    private javax.swing.JLabel lblEmployeeLastName;
    private javax.swing.JLabel lblEmployeeName;
    private javax.swing.JLabel lblEmployeePhone;
    private javax.swing.JLabel lblEmployeePosition;
    private javax.swing.JLabel lblEmployeeSalary;
    private javax.swing.JLabel lblHome;
    private javax.swing.JLabel lblId;
    private javax.swing.JLabel lblInvBprice;
    private javax.swing.JLabel lblInvBrand;
    private javax.swing.JLabel lblInvDescription;
    private javax.swing.JLabel lblInvId;
    private javax.swing.JLabel lblInvName;
    private javax.swing.JLabel lblInvQuantity;
    private javax.swing.JLabel lblInvSprice;
    private javax.swing.JLabel lblInvUpdateAt;
    private javax.swing.JLabel lblInventory;
    private javax.swing.JLabel lblItemInfoAmount;
    private javax.swing.JLabel lblItemInfoDescription;
    private javax.swing.JLabel lblItemInfoId;
    private javax.swing.JLabel lblItemInfoName;
    private javax.swing.JLabel lblItemInfoPrice;
    private javax.swing.JLabel lblItemInfoStock;
    private javax.swing.JLabel lblItemInformation;
    private javax.swing.JLabel lblItemSales;
    private javax.swing.JLabel lblItemSalesId;
    private javax.swing.JLabel lblItemSalesPayment;
    private javax.swing.JLabel lblItemSalesQuantity;
    private javax.swing.JLabel lblSales;
    private javax.swing.JLabel lblShowAmountDue;
    private javax.swing.JLabel lblShowBalance;
    private javax.swing.JLabel lblShowPayable;
    private javax.swing.JLabel lblbprice;
    private javax.swing.JLabel lblbrand;
    private javax.swing.JLabel lbldescription;
    private javax.swing.JLabel lblname;
    private javax.swing.JLabel lblpayable;
    private javax.swing.JLabel lblpercent;
    private javax.swing.JLabel lblquantity;
    private javax.swing.JLabel lblrdate;
    private javax.swing.JLabel lblsprice;
    private javax.swing.JMenuItem manageCheckout;
    private javax.swing.JMenuItem manageEmployees;
    private javax.swing.JMenuItem manageInventory;
    private javax.swing.JMenuItem manageItems;
    private javax.swing.JMenuItem manageSales;
    private javax.swing.JMenuItem managehome;
    private javax.swing.JTextField txtCash;
    private javax.swing.JTextField txtEmployeeAddress;
    private javax.swing.JTextField txtEmployeeEmail;
    private javax.swing.JTextField txtEmployeeId;
    private javax.swing.JTextField txtEmployeeLastName;
    private javax.swing.JTextField txtEmployeeName;
    private javax.swing.JTextField txtEmployeePhone;
    private javax.swing.JTextField txtEmployeePosition;
    private javax.swing.JTextField txtEmployeeSalary;
    private javax.swing.JTextField txtEnterPercent;
    private javax.swing.JTextField txtInventoryBprice;
    private javax.swing.JTextField txtInventoryBrand;
    private javax.swing.JTextField txtInventoryDescription;
    private javax.swing.JTextField txtInventoryItemId;
    private javax.swing.JTextField txtInventoryName;
    private javax.swing.JTextField txtInventoryQuantity;
    private javax.swing.JTextField txtInventorySprice;
    private javax.swing.JTextField txtInventoryUpdateAt;
    private javax.swing.JTextField txtItemInfoAmount;
    private javax.swing.JTextField txtItemInfoDescription;
    private javax.swing.JTextField txtItemInfoId;
    private javax.swing.JTextField txtItemInfoName;
    private javax.swing.JTextField txtItemInfoPrice;
    private javax.swing.JTextField txtItemInfoStock;
    private javax.swing.JTextField txtItemSalesId;
    private javax.swing.JTextField txtItemSalesPayment;
    private javax.swing.JTextField txtItemSalesQuantity;
    private javax.swing.JTextField txtItemsBprice;
    private javax.swing.JTextField txtItemsBrand;
    private javax.swing.JTextField txtItemsDescription;
    private javax.swing.JTextField txtItemsId;
    private javax.swing.JTextField txtItemsName;
    private javax.swing.JTextField txtItemsQuantity;
    private javax.swing.JTextField txtItemsRdate;
    private javax.swing.JTextField txtItemsSprice;
    private javax.swing.JTextField txtShowAmount;
    // End of variables declaration//GEN-END:variables
}
